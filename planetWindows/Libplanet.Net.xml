<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Libplanet.Net</name>
    </assembly>
    <members>
        <member name="T:Libplanet.Net.ActionExecutionState">
            <summary>
            Indicates a progress of executing block actions.
            </summary>
        </member>
        <member name="P:Libplanet.Net.ActionExecutionState.TotalBlockCount">
            <summary>
            Total number of blocks to execute in the current batch.
            </summary>
        </member>
        <member name="P:Libplanet.Net.ActionExecutionState.ExecutedBlockCount">
            <summary>
            The number of currently executed blocks.
            </summary>
        </member>
        <member name="P:Libplanet.Net.ActionExecutionState.ExecutedBlockHash">
            <summary>
            The hash digest of the block just executed.
            </summary>
        </member>
        <member name="P:Libplanet.Net.ActionExecutionState.CurrentPhase">
            <inheritdoc />
        </member>
        <member name="T:Libplanet.Net.AppProtocolVersion">
            <summary>
            A <em>claim</em> of a version.
            <para>Every peer in network shows others their <see cref="T:Libplanet.Net.AppProtocolVersion"/> information.
            As every peer can change its software by itself, this <see cref="T:Libplanet.Net.AppProtocolVersion"/>
            is theoretically arbitrary, hence a &#x201c;claim.&#x201d; (i.e., no authority).</para>
            <para>In order to verify who claimed a version, every <see cref="T:Libplanet.Net.AppProtocolVersion"/>
            has its <see cref="P:Libplanet.Net.AppProtocolVersion.Signature"/> which is made by its <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>.
            <see cref="M:Libplanet.Net.AppProtocolVersion.Verify(Libplanet.Crypto.PublicKey)"/> method purposes to determine whether an information
            is claimed by its corresponding <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/> in fact.</para>
            </summary>
        </member>
        <member name="F:Libplanet.Net.AppProtocolVersion.Version">
            <summary>
            The version number.  This does not have to be increased by only 1, but can be more
            than that.
            </summary>
        </member>
        <member name="F:Libplanet.Net.AppProtocolVersion.Extra">
            <summary>
            Optional extra data about the version.  This can be used for any purpose
            by apps, such as a URL to download the software.
            </summary>
        </member>
        <member name="F:Libplanet.Net.AppProtocolVersion.Signer">
            <summary>
            A signer who claims presence of a version.
            </summary>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.#ctor(System.Int32,Bencodex.Types.IValue,System.Collections.Immutable.ImmutableArray{System.Byte},Libplanet.Crypto.Address)">
            <summary>
            Initializes an <see cref="T:Libplanet.Net.AppProtocolVersion"/> value with field values.
            </summary>
            <param name="version">Sets the <see cref="F:Libplanet.Net.AppProtocolVersion.Version"/>.</param>
            <param name="extra">Sets the <see cref="F:Libplanet.Net.AppProtocolVersion.Extra"/>.</param>
            <param name="signature">Sets the <see cref="P:Libplanet.Net.AppProtocolVersion.Signature"/>.</param>
            <param name="signer">Gets the <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>.</param>
        </member>
        <member name="P:Libplanet.Net.AppProtocolVersion.Signature">
            <summary>
            A signature which verifies <seealso cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>'s claim of a version.
            </summary>
        </member>
        <member name="P:Libplanet.Net.AppProtocolVersion.Token">
            <summary>
            A token string which serializes an <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            <para>As this is designed to be easy to copy and paste, the format consists of only
            printable characters in the ASCII character set.</para>
            <para>A token can be deserialized into an <see cref="T:Libplanet.Net.AppProtocolVersion"/> through
            <see cref="M:Libplanet.Net.AppProtocolVersion.FromToken(System.String)"/> method.</para>
            </summary>
            <seealso cref="M:Libplanet.Net.AppProtocolVersion.FromToken(System.String)"/>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.Sign(Libplanet.Crypto.PrivateKey,System.Int32,Bencodex.Types.IValue)">
            <summary>
            Claim a <paramref name="version"/> with <paramref name="extra"/> data and sign it
            using the given private key.
            </summary>
            <param name="signer">A private key to sign the claim.</param>
            <param name="version">A version to claim.</param>
            <param name="extra">Extra data to claim.</param>
            <returns>A signed version claim.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="signer"/> is
            <see langword="null"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.FromToken(System.String)">
            <summary>
            Deserializes a <see cref="P:Libplanet.Net.AppProtocolVersion.Token"/> into an <see cref="T:Libplanet.Net.AppProtocolVersion"/> object.
            </summary>
            <param name="token">A <see cref="P:Libplanet.Net.AppProtocolVersion.Token"/> string.</param>
            <returns>A deserialized <see cref="T:Libplanet.Net.AppProtocolVersion"/> object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <see langword="null"/> is passed to
            <paramref name="token"/>.</exception>
            <exception cref="T:System.FormatException">Thrown when the given <paramref name="token"/>'s
            format is invalid.  The detailed reason is in the message.</exception>
            <seealso cref="P:Libplanet.Net.AppProtocolVersion.Token"/>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.Verify(Libplanet.Crypto.PublicKey)">
            <summary>
            Verifies whether the claim is certainly signed by the <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>.
            </summary>
            <param name="publicKey">A public key of the <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>.</param>
            <returns><see langword="true"/> if and only if the given <paramref name="publicKey"/> is
            <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>'s and the <see cref="P:Libplanet.Net.AppProtocolVersion.Signature"/> is certainly signed by
            the <see cref="F:Libplanet.Net.AppProtocolVersion.Signer"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.Equals(Libplanet.Net.AppProtocolVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.AppProtocolVersion.GetMessage(System.Int32,Bencodex.Types.IValue)">
            <summary>
            Gets a deterministic message to sign.
            </summary>
            <returns>A deterministic message to sign.</returns>
        </member>
        <member name="T:Libplanet.Net.BlockCandidateTable">
            <summary>
            <para>
            A class for storing downloaded <see cref="T:Libplanet.Types.Blocks.Block"/>s as <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            A <see cref="T:Libplanet.Types.Blocks.BlockHeader"/> is used as a key for storing downloading context.
            </para>
            <para>
            This is designed to be exception free.
            </para>
            </summary>
        </member>
        <member name="M:Libplanet.Net.BlockCandidateTable.Add(Libplanet.Types.Blocks.BlockHeader,Libplanet.Blockchain.Branch)">
            <summary>
            <para>
            Adds given <paramref name="branch"/> to the table.
            </para>
            <para>
            The internal table is only updated if it does not already contain
            <paramref name="blockHeader"/> as its key.
            </para>
            </summary>
            <param name="blockHeader">The header of the <see cref="T:Libplanet.Blockchain.BlockChain"/>'s
            tip at the time of downloading the blocks.</param>
            <param name="branch">The list of downloaded <see cref="T:Libplanet.Types.Blocks.Block"/>s and
            its <see cref="T:Libplanet.Types.Blocks.BlockCommit"/>s.</param>
        </member>
        <member name="M:Libplanet.Net.BlockCandidateTable.GetCurrentRoundCandidate(Libplanet.Types.Blocks.BlockHeader)">
            <summary>
            Get the <see cref="T:Libplanet.Types.Blocks.Block"/>s which are in the table by <see cref="T:Libplanet.Types.Blocks.BlockHeader"/>.
            </summary>
            <param name="thisRoundTip">Canonical <see cref="T:Libplanet.Blockchain.BlockChain"/>'s
            tip of this round.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Libplanet.Types.Blocks.Block"/>s with associated
            <see cref="T:Libplanet.Types.Blocks.BlockCommit"/>s by
            <paramref name="thisRoundTip"/> if found, otherwise <see langword="null"/>.
            The result is guaranteed to be non-empty and consecutive sorted by
            <see cref="P:Libplanet.Types.Blocks.Block.Index"/>.
            </returns>
            <seealso cref="M:Libplanet.Net.BlockCandidateTable.Add(Libplanet.Types.Blocks.BlockHeader,Libplanet.Blockchain.Branch)"/>
        </member>
        <member name="M:Libplanet.Net.BlockCompletion`1.Complete(System.Collections.Generic.IReadOnlyList{`0},Libplanet.Net.BlockCompletion{`0}.BlockFetcher,System.Threading.CancellationToken)">
            <summary>
            Downloads blocks from <paramref name="peers"/> in parallel,
            using the given <paramref name="blockFetcher"/> function.
            </summary>
            <param name="peers">A list of peers to download blocks.</param>
            <param name="blockFetcher">A function to take demands and a peer, and then
            download corresponding blocks.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting
            for the task to complete.</param>
            <returns>An async enumerable that yields pairs of a fetched block and its source
            peer.  It terminates when all demands are satisfied.</returns>
        </member>
        <member name="T:Libplanet.Net.BlockDemand">
            <summary>
            Struct represents <see cref="T:Libplanet.Net.Swarm"/>'s block demand status.
            </summary>
        </member>
        <member name="F:Libplanet.Net.BlockDemand.Header">
            <summary>
            The <see cref="T:Libplanet.Types.Blocks.BlockHeader"/> of the block to request.
            </summary>
        </member>
        <member name="F:Libplanet.Net.BlockDemand.Peer">
            <summary>
            The <see cref="T:Libplanet.Net.BoundPeer"/> to request block hash from.
            </summary>
        </member>
        <member name="F:Libplanet.Net.BlockDemand.Timestamp">
            <summary>
            The <see cref="T:System.DateTimeOffset"/> when
            the corresponding block information was received.
            </summary>
        </member>
        <member name="T:Libplanet.Net.BlockDownloadState">
            <summary>
            Indicates a progress of downloading blocks.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockDownloadState.TotalBlockCount">
            <summary>
            Total number of blocks to receive in the current batch.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockDownloadState.ReceivedBlockCount">
            <summary>
            The number of currently received blocks.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockDownloadState.ReceivedBlockHash">
            <summary>
            The hash digest of the block just received.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockDownloadState.CurrentPhase">
            <inheritdoc />
        </member>
        <member name="P:Libplanet.Net.BlockDownloadState.SourcePeer">
            <summary>
            The peer which sent the block.
            </summary>
        </member>
        <member name="T:Libplanet.Net.BlockHashDownloadState">
            <summary>
            Indicates a progress of downloading block hashes.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockHashDownloadState.EstimatedTotalBlockHashCount">
            <summary>
            The estimated number of block hashes to receive in the current batch.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockHashDownloadState.ReceivedBlockHashCount">
            <summary>
            The number of currently received block hashes.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockHashDownloadState.SourcePeer">
            <summary>
            The peer which sent the block hashes.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockHashDownloadState.CurrentPhase">
            <inheritdoc />
        </member>
        <member name="F:Libplanet.Net.BlockSyncState.TotalPhase">
            <summary>
            The number of total phases.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockSyncState.CurrentPhase">
            <summary>
            The current phase.
            </summary>
        </member>
        <member name="T:Libplanet.Net.BlockVerificationState">
            <summary>
            Indicates a progress of verifying blocks.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockVerificationState.TotalBlockCount">
            <summary>
            Total number of blocks to verify in the current batch.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockVerificationState.VerifiedBlockCount">
            <summary>
            The number of blocks that completed verification.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockVerificationState.VerifiedBlockHash">
            <summary>
            The hash digest of the block just verified.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BlockVerificationState.CurrentPhase">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.BoundPeer.#ctor(Libplanet.Crypto.PublicKey,System.Net.DnsEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.BoundPeer"/> class.
            </summary>
            <param name="publicKey">A <see cref="P:Libplanet.Net.BoundPeer.PublicKey"/> of the
            <see cref="T:Libplanet.Net.BoundPeer"/>.</param>
            <param name="endPoint">A <see cref="T:System.Net.DnsEndPoint"/> consisting of the
            host and port of the <see cref="T:Libplanet.Net.BoundPeer"/>.</param>
        </member>
        <member name="P:Libplanet.Net.BoundPeer.PublicKey">
            <summary>
            The corresponding <see cref="T:Libplanet.Crypto.PublicKey"/> of
            this peer.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BoundPeer.Address">
            <summary>The peer's address which is derived from
            its <see cref="P:Libplanet.Net.BoundPeer.PublicKey"/>.
            </summary>
            <seealso cref="P:Libplanet.Net.BoundPeer.PublicKey"/>
        </member>
        <member name="P:Libplanet.Net.BoundPeer.EndPoint">
            <summary>
            The corresponding <see cref="T:System.Net.DnsEndPoint"/> of this peer.
            </summary>
        </member>
        <member name="P:Libplanet.Net.BoundPeer.Bencoded">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.BoundPeer.ParsePeer(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.BoundPeer"/> class from
            comma-separated string.</summary>
            <param name="peerInfo">A comma-separated string have format {pubkey},{host},{port}.
            </param>
            <returns>A <see cref="T:Libplanet.Net.BoundPeer"/> from given data.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the given peerInfo is invalid.
            </exception>
        </member>
        <member name="M:Libplanet.Net.BoundPeer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.BoundPeer.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Libplanet.Net.Consensus.ConsensusContext">
            <summary>
            A class that maintains the states of a <see cref="T:Libplanet.Net.Consensus.Context"/> for block
            indices now in consensus.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.#ctor(Libplanet.Net.Consensus.IConsensusMessageCommunicator,Libplanet.Blockchain.BlockChain,Libplanet.Crypto.PrivateKey,System.TimeSpan,Libplanet.Net.Consensus.ContextTimeoutOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.ConsensusContext"/> class.
            </summary>
            <param name="consensusMessageCommunicator">A communicator for receiving
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> from or publishing to other validators.</param>
            <param name="blockChain">A blockchain that will be committed, which
            will be voted by consensus, and used for proposing a block.
            </param>
            <param name="privateKey">A <see cref="T:Libplanet.Crypto.PrivateKey"/> for signing message and blocks.
            </param>
            <param name="newHeightDelay">A time delay in starting the consensus for the next height
            block. <seealso cref="M:Libplanet.Net.Consensus.ConsensusContext.OnTipChanged(System.Object,System.ValueTuple{Libplanet.Types.Blocks.Block,Libplanet.Types.Blocks.Block})"/>
            </param>
            <param name="contextTimeoutOption">A <see cref="T:Libplanet.Net.Consensus.ContextTimeoutOption"/> for
            configuring a timeout for each <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Step"/>.</param>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusContext.Height">
            <summary>
            The index of block that <see cref="T:Libplanet.Net.Consensus.ConsensusContext"/> is watching. The value can be
            changed by starting a consensus or appending a block.
            </summary>
            <seealso cref="M:Libplanet.Net.Consensus.ConsensusContext.NewHeight(System.Int64)"/>  <seealso cref="M:Libplanet.Net.Consensus.ConsensusContext.OnTipChanged(System.Object,System.ValueTuple{Libplanet.Types.Blocks.Block,Libplanet.Types.Blocks.Block})"/>
            <returns>If <see cref="M:Libplanet.Net.Consensus.ConsensusContext.NewHeight(System.Int64)"/> or <see cref="M:Libplanet.Net.Consensus.ConsensusContext.OnTipChanged(System.Object,System.ValueTuple{Libplanet.Types.Blocks.Block,Libplanet.Types.Blocks.Block})"/> is called
            before, returns current working height, otherwise returns <c>-1</c>.</returns>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusContext.Round">
            <summary>
            A current round of <see cref="T:Libplanet.Net.Consensus.Context"/> in current <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Height"/>.
            </summary>
            <returns>If there is <see cref="T:Libplanet.Net.Consensus.Context"/> for <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Height"/> returns the round
            of current <see cref="T:Libplanet.Net.Consensus.Context"/>, or otherwise returns -1.
            </returns>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusContext.Step">
            <summary>
            The current step of <see cref="T:Libplanet.Net.Consensus.Context"/> in current <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Height"/>.
            </summary>
            <returns>If there is <see cref="T:Libplanet.Net.Consensus.Context"/> for <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Height"/> returns the step
            of current <see cref="T:Libplanet.Net.Consensus.Context"/>, or otherwise returns
            <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Null"/>.
            </returns>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusContext.Contexts">
            <summary>
            A dictionary of <see cref="T:Libplanet.Net.Consensus.Context"/> for each heights. Each key represents the
            height of value, and value is the <see cref="T:Libplanet.Net.Consensus.Context"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.NewHeight(System.Int64)">
            <summary>
            Starts a new <see cref="T:Libplanet.Net.Consensus.Context"/> for given <paramref name="height"/>.
            </summary>
            <param name="height">The height of a new <see cref="T:Libplanet.Net.Consensus.Context"/> to start.</param>
            <exception cref="T:Libplanet.Net.Consensus.InvalidHeightIncreasingException">Thrown if given
            <paramref name="height"/> is less than or equal to <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Height"/>.</exception>
            <remarks>The method is also called when the tip of the <see cref="T:Libplanet.Blockchain.BlockChain"/> is
            changed (i.e., committed, synchronized).
            </remarks>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.HandleMessage(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            <para>
            Handles a received <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> by either dispatching it to the right
            <see cref="T:Libplanet.Net.Consensus.Context"/> or discarding it.
            </para>
            <para>
            In particular, this discards <paramref name="consensusMessage"/> with
            <see cref="P:Libplanet.Net.Messages.ConsensusMsg.Height"/> less than <see cref="P:Libplanet.Net.Consensus.ConsensusContext.Height"/>.  Otherwise,
            given <paramref name="consensusMessage"/> is passed on to a <see cref="T:Libplanet.Net.Consensus.Context"/>
            with <see cref="P:Libplanet.Net.Consensus.Context.Height"/> the same as <see cref="P:Libplanet.Net.Messages.ConsensusMsg.Height"/> of
            <paramref name="consensusMessage"/>.  If there is no such <see cref="T:Libplanet.Net.Consensus.Context"/>,
            then a new <see cref="T:Libplanet.Net.Consensus.Context"/> is created for the dispatch.
            </para>
            </summary>
            <param name="consensusMessage">The <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> received from
            any validator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="consensusMessage"/> is dispatched to
            a <see cref="T:Libplanet.Net.Consensus.Context"/>, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.HandleMaj23(Libplanet.Consensus.Maj23)">
            <summary>
            Handles a received <see cref="T:Libplanet.Consensus.Maj23"/> and return message to fetch.
            </summary>
            <param name="maj23">The <see cref="T:Libplanet.Consensus.Maj23"/> received from any validator.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to reply back.
            </returns>
            <remarks>This method does not update state of the context.</remarks>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.HandleVoteSetBits(Libplanet.Consensus.VoteSetBits)">
            <summary>
            Handles a received <see cref="T:Libplanet.Consensus.VoteSetBits"/> and return message to fetch.
            </summary>
            <param name="voteSetBits">The <see cref="T:Libplanet.Consensus.VoteSetBits"/> received from any validator.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to reply back.
            </returns>
            <remarks>This method does not update state of the context.</remarks>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.ToString">
            <summary>
            Returns the summary for <see cref="T:Libplanet.Net.Consensus.ConsensusContext"/>.
            </summary>
            <returns>Returns the current height <see cref="T:Libplanet.Net.Consensus.Context"/>. if there's no instance of
            <see cref="T:Libplanet.Net.Consensus.Context"/> for current height, returns "No context".
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.OnTipChanged(System.Object,System.ValueTuple{Libplanet.Types.Blocks.Block,Libplanet.Types.Blocks.Block})">
            <summary>
            A handler for <see cref="E:Libplanet.Blockchain.BlockChain.TipChanged"/> event that calls
            <see cref="M:Libplanet.Net.Consensus.ConsensusContext.NewHeight(System.Int64)"/>.  Starting a new height will be delayed for
            <see cref="F:Libplanet.Net.Consensus.ConsensusContext._newHeightDelay"/> in order to collect remaining delayed votes
            and stabilize the consensus process by waiting for Global Stabilization Time.
            </summary>
            <param name="sender">The source object instance for <see cref="T:System.EventHandler"/>.
            </param>
            <param name="e">The event arguments given by <see cref="E:Libplanet.Blockchain.BlockChain.TipChanged"/>
            as a tuple of the old tip and the new tip.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.CreateContext(System.Int64)">
            <summary>
            Create new context of height of the given <paramref name="height"/>
            and attach event handlers to it, and return the created context.
            </summary>
            <param name="height">The height of the context to create.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusContext.RemoveOldContexts(System.Int64)">
            <summary>
            Discard and remove all contexts that has lower height with
            the given <paramref name="height"/>.
            </summary>
            <param name="height">The upper bound of height of the contexts to be discarded.</param>
        </member>
        <member name="E:Libplanet.Net.Consensus.ConsensusContext.ExceptionOccurred">
            <inheritdoc cref="E:Libplanet.Net.Consensus.Context.ExceptionOccurred"/>
        </member>
        <member name="E:Libplanet.Net.Consensus.ConsensusContext.TimeoutProcessed">
            <inheritdoc cref="E:Libplanet.Net.Consensus.Context.TimeoutProcessed"/>
        </member>
        <member name="E:Libplanet.Net.Consensus.ConsensusContext.StateChanged">
            <inheritdoc cref="E:Libplanet.Net.Consensus.Context.StateChanged"/>
        </member>
        <member name="E:Libplanet.Net.Consensus.ConsensusContext.MessagePublished">
            <inheritdoc cref="E:Libplanet.Net.Consensus.Context.MessagePublished"/>
        </member>
        <member name="E:Libplanet.Net.Consensus.ConsensusContext.MessageConsumed">
            <inheritdoc cref="E:Libplanet.Net.Consensus.Context.MessageConsumed"/>
        </member>
        <member name="E:Libplanet.Net.Consensus.ConsensusContext.MutationConsumed">
            <inheritdoc cref="E:Libplanet.Net.Consensus.Context.MutationConsumed"/>
        </member>
        <member name="T:Libplanet.Net.Consensus.ConsensusReactor">
            <summary>
            A manager class for starting network and joining into consensus.
            <seealso cref="P:Libplanet.Net.Consensus.ConsensusReactor.ConsensusContext"/>
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusReactor.#ctor(Libplanet.Net.Transports.ITransport,Libplanet.Blockchain.BlockChain,Libplanet.Crypto.PrivateKey,System.Collections.Immutable.ImmutableList{Libplanet.Net.BoundPeer},System.Collections.Immutable.ImmutableList{Libplanet.Net.BoundPeer},System.TimeSpan,Libplanet.Net.Consensus.ContextTimeoutOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.ConsensusReactor"/> class.
            </summary>
            <param name="consensusTransport">An <see cref="T:Libplanet.Net.Transports.ITransport"/> for sending the
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>s to validators.</param>
            <param name="blockChain">A blockchain that will be committed, which
            will be voted by consensus, and used for proposing a block.
            </param>
            <param name="privateKey">A <see cref="T:Libplanet.Crypto.PrivateKey"/> for using in signing a block,
            message.
            </param>
            <param name="validatorPeers">A list of validator's <see cref="T:Libplanet.Net.BoundPeer"/>, including
            itself.
            </param>
            <param name="seedPeers">A list of seed's <see cref="T:Libplanet.Net.BoundPeer"/>.</param>
            <param name="newHeightDelay">A time delay in starting the consensus for the next height
            block.
            </param>
            <param name="contextTimeoutOption">A <see cref="T:Libplanet.Net.Consensus.ContextTimeoutOption"/> for
            configuring a timeout for each <see cref="T:Libplanet.Net.Consensus.ConsensusStep"/>.</param>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactor.Running">
            <summary>
            Whether this <see cref="T:Libplanet.Net.Consensus.ConsensusReactor"/> is running.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactor.Height">
            <summary>
            The index of block that <see cref="P:Libplanet.Net.Consensus.ConsensusReactor.ConsensusContext"/> is watching. The value can be
            changed by starting a consensus or appending a block.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactor.Validators">
            <summary>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the validators.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusReactor.Dispose">
            <summary>
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusReactor.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the instance and joins into consensus.
            </summary>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>Returns the <see cref="M:Libplanet.Net.Transports.ITransport.StartAsync(System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusReactor.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the instance and consensus.
            </summary>
            <param name="cancellationToken">A cancellation Token.</param>
            <returns>Returns the <see cref="M:Libplanet.Net.Transports.ITransport.StopAsync(System.TimeSpan,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusReactor.ToString">
            <summary>
            Returns a summary of current consensus status in JSON-formatted string.
            </summary>
            <returns>Returns a summary in JSON-formatted string.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.ConsensusReactor.ProcessMessage(Libplanet.Net.Messages.MessageContent)">
            <summary>
            A handler for received <see cref="T:Libplanet.Net.Messages.Message"/>s.
            </summary>
            <param name="content">A message to process.</param>
        </member>
        <member name="T:Libplanet.Net.Consensus.ConsensusReactorOption">
            <summary>
            A option struct for initializing <see cref="T:Libplanet.Net.Consensus.ConsensusReactor"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.ConsensusPort">
            <summary>
            A port number that is used for exchanging <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.ConsensusWorkers">
            <summary>
            A number of <see cref="T:Libplanet.Net.Transports.ITransport"/>'s worker.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.ConsensusPrivateKey">
            <summary>
            A <see cref="T:Libplanet.Crypto.PrivateKey"/> for signing block and message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.SeedPeers">
            <summary>
            A list of seeds.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.ConsensusPeers">
            <summary>
            A list of validators.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.TargetBlockInterval">
            <summary>
            A time delay in starting the consensus for the next height block.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.ConsensusReactorOption.ContextTimeoutOptions">
            <summary>
            A timeout second and multiplier value for used in <see cref="T:Libplanet.Net.Consensus.Context"/>.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Consensus.ConsensusStep.Default">
            <summary>
            Initial Step.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Consensus.ConsensusStep.Propose">
            <summary>
            Proposing Step.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Consensus.ConsensusStep.PreVote">
            <summary>
            Voting Step.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit">
            <summary>
            Commit voting step.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Consensus.ConsensusStep.EndCommit">
            <summary>
            Commit end step.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Consensus.ConsensusStep.Null">
            <summary>
            Only when context does not exists.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Consensus.Context">
            <summary>
            A state machine class of PBFT consensus algorithm. The state machine is responsible for
            proposing, validating, voting a block and committing the voted block to the blockchain.
            There are five states:
            <list type="bullet">
                <item>
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Default"/> which is the initial state when
                    the <see cref="M:Libplanet.Net.Consensus.Context.Start(Libplanet.Types.Blocks.BlockCommit)"/> is not called (i.e., round has not been started).
                </item>
                <item>
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Propose"/>, which is the state when
                    the round has been started and waiting for the block proposal. If a validator is a
                    proposer of the round, it will propose a block to the other validators and to
                    itself.
                </item>
                <item>
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/>, which is the state when a block
                    proposal for a round has been received. While translating to this step, state
                    machine votes for the block whether block is valid or not, and waiting for any +2/3
                    votes from other validators.
                </item>
                <item>
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/>, which is the state received
                    any +2/3 votes in <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/>. While
                    translating to this step, state machine votes for whether the block should be
                    committed or not, and waiting for any +2/3 committing votes from other validators.
                    If <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/>
                    receives +2/3 commit votes with NIL, starts new round <see cref="M:Libplanet.Net.Consensus.Context.StartRound(System.Int32)"/> and
                    moves step to <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Propose"/>.
                </item>
                <item>
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.EndCommit"/>, which is the state represents
                    committing vote has been received from other validators. Block will be committed
                    to the blockchain and consensus for this height is stopped. (responsibility of next
                    height handling is at <see cref="T:Libplanet.Net.Consensus.ConsensusContext"/>).
                </item>
                <item>
                    In the above states, <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Propose"/>, If
                    receiving proposal fails in <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPropose(System.Int64)"/>, then step is moved to
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/> and vote NIL.
                </item>
                <item>
                    Similar to Propose, <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/> and
                    <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/> also wait for
                    <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPreVote(System.Int64)"/> or <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPreCommit(System.Int64)"/> respectively,
                    if +2/3 vote received but neither NIL nor Block is not +2/3. If still +2/3 vote is
                    not received neither NIL nor Block after timeout runs out, then move to next step
                    and vote NIL.
                </item>
            </list>
            Validators are bonding/bonded nodes that participate in the consensus.
            </summary>
            <remarks>
            A <see cref="T:Libplanet.Net.Consensus.Context"/> represents a consensus of a single height and its multiple
            rounds.
            </remarks>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.Start(Libplanet.Types.Blocks.BlockCommit)">
            <summary>
            Starts round #0 of consensus for <see cref="P:Libplanet.Net.Consensus.Context.Height"/>.
            </summary>
            <param name="lastCommit">A <see cref="P:Libplanet.Types.Blocks.Block.LastCommit"/> from previous block.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.MessageConsumerTask(System.Threading.CancellationToken)">
            <summary>
            Consumes every <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> in the message queue.
            </summary>
            <param name="cancellationToken">A cancellation token for reading
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>s from the message queue.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.MutationConsumerTask(System.Threading.CancellationToken)">
            <summary>
            Consumes every <see cref="T:System.Action"/> in the mutation queue.
            </summary>
            <param name="cancellationToken">A cancellation token for reading
            <see cref="T:System.Action"/>s from the mutation queue.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProduceMessage(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            Adds <paramref name="message"/> to the message queue.
            </summary>
            <param name="message">A <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to be processed.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProduceMutation(System.Action)">
            <summary>
            Adds a mutating <see cref="T:System.Action"/> to the mutation queue.
            </summary>
            <param name="mutation">A <see cref="T:System.Action"/> to be processed.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.OnTimeoutPropose(System.Int32)">
            <summary>
            Schedules <see cref="M:Libplanet.Net.Consensus.Context.ProcessTimeoutPropose(System.Int32)"/> to be queued after
            <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPropose(System.Int64)"/> amount of time.
            </summary>
            <param name="round">A round that the timeout task is scheduled for.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.OnTimeoutPreVote(System.Int32)">
            <summary>
            Schedules <see cref="M:Libplanet.Net.Consensus.Context.ProcessTimeoutPreVote(System.Int32)"/> to be queued after
            <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPreVote(System.Int64)"/> amount of time.
            </summary>
            <param name="round">A round that the timeout task is scheduled for.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.OnTimeoutPreCommit(System.Int32)">
            <summary>
            Schedules <see cref="M:Libplanet.Net.Consensus.Context.ProcessTimeoutPreCommit(System.Int32)"/> to be queued after
            <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPreCommit(System.Int64)"/> amount of time.
            </summary>
            <param name="round">The round that the timeout task is scheduled for.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.#ctor(Libplanet.Net.Consensus.IConsensusMessageCommunicator,Libplanet.Blockchain.BlockChain,System.Int64,Libplanet.Crypto.PrivateKey,Libplanet.Types.Consensus.ValidatorSet,Libplanet.Net.Consensus.ContextTimeoutOption)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.Context"/> class.
            </summary>
            <param name="consensusMessageCommunicator">A communicator for receiving
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> from or publishing to other validators.</param>
            <param name="blockChain">A blockchain that will be committed, which
            will be voted by consensus, and used for proposing a block.
            </param>
            <param name="height">A target <see cref="P:Libplanet.Net.Consensus.Context.Height"/> of the consensus state.
            </param>
            <param name="privateKey">A private key for signing a block and message.
            <seealso cref="M:Libplanet.Net.Consensus.Context.GetValue"/>
            <seealso cref="M:Libplanet.Net.Consensus.Context.ProcessGenericUponRules"/>
            <seealso cref="M:Libplanet.Net.Consensus.Context.MakeVote(System.Int32,Libplanet.Types.Blocks.BlockHash,Libplanet.Types.Consensus.VoteFlag)"/>
            </param>
            <param name="validators">The <see cref="T:Libplanet.Types.Consensus.ValidatorSet"/> for
            given <paramref name="height"/>.</param>
            <param name="contextTimeoutOptions">A <see cref="T:Libplanet.Net.Consensus.ContextTimeoutOption"/> for
            configuring a timeout for each <see cref="T:Libplanet.Net.Consensus.ConsensusStep"/>.</param>
        </member>
        <member name="P:Libplanet.Net.Consensus.Context.Height">
            <summary>
            A target height of this consensus state. This is also a block index now in consensus.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.Context.Round">
            <summary>
            A round represents of this consensus state.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.Context.Step">
            <summary>
            A step represents of this consensus state. See <see cref="T:Libplanet.Net.Consensus.Context"/> for more detail.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.GetBlockCommit">
            <summary>
            Returns a <see cref="T:Libplanet.Types.Blocks.BlockCommit"/> if the context is committed.
            </summary>
            <returns>Returns <see cref="T:Libplanet.Types.Blocks.BlockCommit"/> if the context is committed
            otherwise returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.AddMaj23(Libplanet.Consensus.Maj23)">
            <summary>
            Add a <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to the context.
            </summary>
            <param name="maj23">A <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to add.</param>
            <returns>A <see cref="T:Libplanet.Consensus.VoteSetBits"/> if given <paramref name="maj23"/> is valid and
            required.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ToString">
            <summary>
            Returns the summary of context in JSON-formatted string.
            </summary>
            <returns>Returns a JSON-formatted string of context state.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.TimeoutPreVote(System.Int64)">
            <summary>
            Gets the timeout of <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/> with the given
            round.
            </summary>
            <param name="round">A round to get the timeout.</param>
            <returns>A duration in <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.TimeoutPreCommit(System.Int64)">
            <summary>
            Gets the timeout of <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/> with the given
            round.
            </summary>
            <param name="round">A round to get the timeout.</param>
            <returns>A duration in <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.TimeoutPropose(System.Int64)">
            <summary>
            Gets the timeout of <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Propose"/> with the given
            round.
            </summary>
            <param name="round">A round to get the timeout.</param>
            <returns>A duration in <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.GetValue">
            <summary>
            Creates a new <see cref="T:Libplanet.Types.Blocks.Block"/> to propose.
            </summary>
            <returns>A new <see cref="T:Libplanet.Types.Blocks.Block"/> if successfully proposed,
            otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.PublishMessage(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            Publish <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to validators.
            </summary>
            <param name="message">A <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to publish.</param>
            <remarks><see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> should be published to itself.</remarks>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.IsValid(Libplanet.Types.Blocks.Block,System.Collections.Generic.IReadOnlyList{Libplanet.Action.ICommittedActionEvaluation}@)">
            <summary>
            Validates the given block.
            </summary>
            <param name="block">A <see cref="T:Libplanet.Types.Blocks.Block"/> to validate.</param>
            <param name="evaluatedActions">A list of evaluated actions from <see cref="T:Libplanet.Types.Blocks.Block"/>.
            If a given block is invalid, this will returns
            <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty"/>
            lists.
            </param>
            <returns><see langword="true"/> if block is valid, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.MakeVote(System.Int32,Libplanet.Types.Blocks.BlockHash,Libplanet.Types.Consensus.VoteFlag)">
            <summary>
            Creates a signed <see cref="T:Libplanet.Types.Consensus.Vote"/> for a <see cref="T:Libplanet.Net.Messages.ConsensusPreVoteMsg"/> or
            a <see cref="T:Libplanet.Net.Messages.ConsensusPreCommitMsg"/>.
            </summary>
            <param name="round">Current context round.</param>
            <param name="hash">Current context locked <see cref="T:Libplanet.Types.Blocks.BlockHash"/>.</param>
            <param name="flag"><see cref="T:Libplanet.Types.Consensus.VoteFlag"/> of <see cref="T:Libplanet.Types.Consensus.Vote"/> to create.
            Set to <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreVote"/> if message is <see cref="T:Libplanet.Net.Messages.ConsensusPreVoteMsg"/>.
            If message is <see cref="T:Libplanet.Net.Messages.ConsensusPreCommitMsg"/>, Set to
            <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreCommit"/>.</param>
            <returns>Returns a signed <see cref="T:Libplanet.Types.Consensus.Vote"/> with consensus private key.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="flag"/> is either
            <see cref="F:Libplanet.Types.Consensus.VoteFlag.Null"/> or <see cref="F:Libplanet.Types.Consensus.VoteFlag.Unknown"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.MakeMaj23(System.Int32,Libplanet.Types.Blocks.BlockHash,Libplanet.Types.Consensus.VoteFlag)">
            <summary>
            Creates a signed <see cref="T:Libplanet.Consensus.Maj23"/> for a <see cref="T:Libplanet.Net.Messages.ConsensusMaj23Msg"/>.
            </summary>
            <param name="round">Current context round.</param>
            <param name="hash">Current context locked <see cref="T:Libplanet.Types.Blocks.BlockHash"/>.</param>
            <param name="flag"><see cref="T:Libplanet.Types.Consensus.VoteFlag"/> of <see cref="T:Libplanet.Consensus.Maj23"/> to create.
            Set to <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreVote"/> if +2/3 <see cref="T:Libplanet.Net.Messages.ConsensusPreVoteMsg"/>
            messages that votes to the same block with proposal are collected.
            If +2/3 <see cref="T:Libplanet.Net.Messages.ConsensusPreCommitMsg"/> messages that votes to the same block
            with proposal are collected, Set to <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreCommit"/>.</param>
            <returns>Returns a signed <see cref="T:Libplanet.Consensus.Maj23"/> with consensus private key.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="flag"/> is either
            <see cref="F:Libplanet.Types.Consensus.VoteFlag.Null"/> or <see cref="F:Libplanet.Types.Consensus.VoteFlag.Unknown"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.GetProposal">
            <summary>
            Gets the proposed block and valid round of the given round.
            </summary>
            <returns>Returns a tuple of proposer and valid round.  If proposal for the round
            does not exist, returns <see langword="null"/> instead.
            </returns>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.ExceptionOccurred">
            <summary>
            An event that is invoked when an <see cref="T:System.Exception"/> is thrown.
            </summary>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.TimeoutProcessed">
            <summary>
            An event that invoked when any timeout triggered mutation is processed.
            This is conditionally triggered when internal countdown timer has reached zero,
            i.e. when certain conditions are met.
            </summary>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.StateChanged">
            <summary>
            An event that is invoked when the message log size, <see cref="P:Libplanet.Net.Consensus.Context.Round"/>,
            and/or <see cref="T:Libplanet.Net.Consensus.ConsensusStep"/> is changed.
            </summary>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.MessagePublished">
            <summary>
            An event that is invoked when a <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> is published.
            </summary>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.MessageConsumed">
            <summary>
            An event that is invoked when a queued <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> is consumed.
            </summary>
            <remarks>
            This only indicates that a <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> has been dequeued from
            internal queue.  This only creates an <see cref="T:System.Action"/> to be consumed
            by a <see cref="M:Libplanet.Net.Consensus.Context.MutationConsumerTask(System.Threading.CancellationToken)"/> and may or may not result in a state change
            further down the line.
            </remarks>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.MutationConsumed">
            <summary>
            An event that is invoked when a queued <see cref="T:System.Action"/> is consumed.
            </summary>
        </member>
        <member name="E:Libplanet.Net.Consensus.Context.VoteSetModified">
            <summary>
            An event that is invoked when the <see cref="T:Libplanet.Net.Consensus.HeightVoteSet"/> is modified.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.StartRound(System.Int32)">
            <summary>
            Starts a new round.
            </summary>
            <param name="round">The round to start.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.AddMessage(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            Validates given <paramref name="message"/> and add it to the message log.
            </summary>
            <param name="message">A <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to be added.
            </param>
            <remarks>
            If an invalid <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> is given, this method throws
            an <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> and handles it <em>internally</em>
            while invoking <see cref="E:Libplanet.Net.Consensus.Context.ExceptionOccurred"/> event.
            An <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> can be thrown when
            the internal <see cref="T:Libplanet.Net.Consensus.HeightVoteSet"/> does not accept it, i.e.
            <see cref="M:Libplanet.Net.Consensus.HeightVoteSet.AddVote(Libplanet.Types.Consensus.Vote)"/> returns <see langword="false"/>.
            </remarks>
            <seealso cref="M:Libplanet.Net.Consensus.HeightVoteSet.AddVote(Libplanet.Types.Consensus.Vote)"/>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProcessGenericUponRules">
            <summary>
            Checks the current state to mutate <see cref="T:Libplanet.Net.Consensus.ConsensusStep"/> and/or schedule timeouts.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProcessHeightOrRoundUponRules(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            Checks the current state to mutate <see cref="P:Libplanet.Net.Consensus.Context.Round"/> or to terminate
            by setting <see cref="T:Libplanet.Net.Consensus.ConsensusStep"/> to <see cref="F:Libplanet.Net.Consensus.ConsensusStep.EndCommit"/>.
            </summary>
            <param name="message">The <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to process.
            Although this is not strictly needed, this is used for optimization.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProcessTimeoutPropose(System.Int32)">
            <summary>
            A timeout mutation to run if no <see cref="T:Libplanet.Net.Messages.ConsensusProposalMsg"/> is received in
            <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPropose(System.Int64)"/> and is still in <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Propose"/> step.
            </summary>
            <param name="round">A round that the timeout task is scheduled for.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProcessTimeoutPreVote(System.Int32)">
            <summary>
            A timeout mutation to run if +2/3 <see cref="T:Libplanet.Net.Messages.ConsensusPreVoteMsg"/>s were received but
            is still in <paramref name="round"/> round and <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/> step
            after <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPreVote(System.Int64)"/>.
            </summary>
            <param name="round">A round that the timeout task is scheduled for.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Context.ProcessTimeoutPreCommit(System.Int32)">
            <summary>
            A timeout mutation to run if +2/3 <see cref="T:Libplanet.Net.Messages.ConsensusPreCommitMsg"/>s were received but
            is still in <paramref name="round"/> round and <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/>
            step after <see cref="M:Libplanet.Net.Consensus.Context.TimeoutPreCommit(System.Int64)"/>.
            </summary>
            <param name="round">A round that the timeout task is scheduled for.</param>
        </member>
        <member name="T:Libplanet.Net.Consensus.ContextTimeoutOption">
            <summary>
            A options class to configure <see cref="T:Libplanet.Net.Consensus.Context"/> timeout
            for each <see cref="T:Libplanet.Net.Consensus.ConsensusStep"/>.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Consensus.Gossip">
            <summary>
            A class gossips messages into network. Peers will be stored and managed by Kademlia DHT.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.#ctor(Libplanet.Net.Transports.ITransport,System.Collections.Immutable.ImmutableArray{Libplanet.Net.BoundPeer},System.Collections.Immutable.ImmutableArray{Libplanet.Net.BoundPeer},System.Action{Libplanet.Net.Messages.Message},System.Action{Libplanet.Net.Messages.MessageContent},System.Action{Libplanet.Net.Messages.MessageContent})">
            <summary>
            Creates a <see cref="T:Libplanet.Net.Consensus.Gossip"/> instance.
            </summary>
            <param name="transport">
            An <see cref="T:Libplanet.Net.Transports.ITransport"/> used for communicating messages.</param>
            <param name="peers">A list of <see cref="T:Libplanet.Net.BoundPeer"/> composing network.</param>
            <param name="seeds">A list of <see cref="T:Libplanet.Net.BoundPeer"/> for lookup network.</param>
            <param name="validateMessageToReceive">Action to be called to validate
            a received message to add. Validates on <see cref="M:Libplanet.Net.Consensus.Gossip.HandleMessageAsync(System.Threading.CancellationToken)"/>.</param>
            <param name="validateMessageToSend">Action to be called to validate a new message
            to send. Validates on <see cref="M:Libplanet.Net.Consensus.Gossip.HandleWantAsync(Libplanet.Net.Messages.Message,System.Threading.CancellationToken)"/>.</param>
            <param name="processMessage">Action to be called when receiving a new message.</param>
        </member>
        <member name="P:Libplanet.Net.Consensus.Gossip.Running">
            <summary>
            Whether this <see cref="T:Libplanet.Net.Consensus.Gossip"/> instance is running.
            </summary>
            <value>Gets the value indicates whether the instance is running.</value>
        </member>
        <member name="P:Libplanet.Net.Consensus.Gossip.AsPeer">
            <summary>
            <see cref="T:Libplanet.Net.BoundPeer"/> representation of transport used in <see cref="T:Libplanet.Net.Consensus.Gossip"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.Gossip.Peers">
            <summary>
            The list of <see cref="T:Libplanet.Net.BoundPeer"/>s in the <see cref="T:Libplanet.Net.Consensus.Gossip"/>'s table.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.Gossip.DeniedPeers">
            <summary>
            The list of <see cref="T:Libplanet.Net.BoundPeer"/>s written in <see cref="F:Libplanet.Net.Consensus.Gossip._denySet"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start the <see cref="T:Libplanet.Net.Consensus.Gossip"/> instance.
            </summary>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.StopAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stop the <see cref="T:Libplanet.Net.Consensus.Gossip"/> instance.
            </summary>
            <param name="waitFor">
            The <see cref="T:System.TimeSpan"/> of delay before actual stopping.</param>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.ClearCache">
            <summary>
            Clear message cache.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.WaitForRunningAsync">
            <summary>
            Waits until this <see cref="T:Libplanet.Net.Consensus.Gossip"/> instance gets started to run.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> completed when <see cref="P:Libplanet.Net.Consensus.Gossip.Running"/>
            property becomes <see langword="true"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.PublishMessage(Libplanet.Net.Messages.MessageContent)">
            <summary>
            Publish given <see cref="T:Libplanet.Net.Messages.MessageContent"/> to peers.
            </summary>
            <param name="content">A <see cref="T:Libplanet.Net.Messages.MessageContent"/> instance to publish.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.PublishMessage(Libplanet.Net.Messages.MessageContent,System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer})">
            <summary>
            Publish given <see cref="T:Libplanet.Net.Messages.MessageContent"/> to given <paramref name="targetPeers"/>.
            </summary>
            <param name="content">A <see cref="T:Libplanet.Net.Messages.MessageContent"/> instance to publish.</param>
            <param name="targetPeers"><see cref="T:Libplanet.Net.BoundPeer"/>s to publish to.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.AddMessage(Libplanet.Net.Messages.MessageContent)">
            <summary>
            Process a <see cref="T:Libplanet.Net.Messages.MessageContent"/> and add it to the gossip.
            </summary>
            <param name="content">A <see cref="T:Libplanet.Net.Messages.MessageContent"/> instance to
            process and gossip.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.AddMessages(System.Collections.Generic.IEnumerable{Libplanet.Net.Messages.MessageContent})">
            <summary>
            Adds multiple <see cref="T:Libplanet.Net.Messages.MessageContent"/>s in parallel.
            <seealso cref="M:Libplanet.Net.Consensus.Gossip.AddMessage(Libplanet.Net.Messages.MessageContent)"/>
            </summary>
            <param name="contents">
            An enumerable <see cref="T:Libplanet.Net.Messages.MessageContent"/> instance to process and gossip.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.DenyPeer(Libplanet.Net.BoundPeer)">
            <summary>
            Adds <paramref name="peer"/> to the <see cref="F:Libplanet.Net.Consensus.Gossip._denySet"/> to reject
            <see cref="T:Libplanet.Net.Messages.Message"/>s from.
            </summary>
            <param name="peer"><see cref="T:Libplanet.Net.BoundPeer"/> to deny.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.AllowPeer(Libplanet.Net.BoundPeer)">
            <summary>
            Remove <paramref name="peer"/> frin the <see cref="F:Libplanet.Net.Consensus.Gossip._denySet"/> to allow
            <see cref="T:Libplanet.Net.Messages.Message"/>s from.
            </summary>
            <param name="peer"><see cref="T:Libplanet.Net.BoundPeer"/> to allow.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.ClearDenySet">
            <summary>
            Clear <see cref="F:Libplanet.Net.Consensus.Gossip._denySet"/> to allow all <see cref="T:Libplanet.Net.BoundPeer"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.PeersToBroadcast(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Int32)">
            <summary>
            Selects <paramref name="count"/> <see cref="T:Libplanet.Net.BoundPeer"/>s from <paramref name="peers"/>.
            </summary>
            <param name="peers">A <see cref="T:Libplanet.Net.BoundPeer"/> pool.</param>
            <param name="count">Number of <see cref="T:Libplanet.Net.BoundPeer"/> to choose.</param>
            <returns>
            An enumerable <see cref="T:Libplanet.Net.BoundPeer"/>'s of length <paramref name="count"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.HandleMessageAsync(System.Threading.CancellationToken)">
            <summary>
            Handle a message received from <see cref="P:Libplanet.Net.Transports.ITransport.ProcessMessageHandler"/>.
            </summary>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>A function with parameter of <see cref="T:Libplanet.Net.Messages.Message"/>
            and return <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.HeartbeatTask(System.Threading.CancellationToken)">
            <summary>
            A lifecycle task which will run in every <see cref="F:Libplanet.Net.Consensus.Gossip._heartbeatInterval"/>.
            </summary>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.HandleHaveAsync(Libplanet.Net.Messages.Message,System.Threading.CancellationToken)">
            <summary>
            A function handling <see cref="T:Libplanet.Net.Messages.HaveMessage"/>.
            <seealso cref="M:Libplanet.Net.Consensus.Gossip.HandleMessageAsync(System.Threading.CancellationToken)"/>
            </summary>
            <param name="msg">Target <see cref="T:Libplanet.Net.Messages.HaveMessage"/>.</param>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.HandleWantAsync(Libplanet.Net.Messages.Message,System.Threading.CancellationToken)">
            <summary>
            A function handling <see cref="T:Libplanet.Net.Messages.WantMessage"/>.
            <seealso cref="M:Libplanet.Net.Consensus.Gossip.HandleMessageAsync(System.Threading.CancellationToken)"/>
            </summary>
            <param name="msg">Target <see cref="T:Libplanet.Net.Messages.WantMessage"/>.</param>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.RebuildTableAsync(System.Threading.CancellationToken)">
            <summary>
            A lifecycle task which will run in every <see cref="F:Libplanet.Net.Consensus.Gossip._rebuildTableInterval"/> for
            refreshing peer table from seed peer.
            </summary>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.RefreshTableAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically checks whether peers in table is alive.
            </summary>
            <param name="ctx">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.Gossip.ReplyMessagePongAsync(Libplanet.Net.Messages.Message,System.Threading.CancellationToken)">
            <summary>
            Replies a <see cref="T:Libplanet.Net.Messages.PongMsg"/> of received <paramref name="message"/>.
            </summary>
            <param name="message">A message to replies.</param>
            <param name="ctx">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="T:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator">
            <summary>
            An <see cref="T:Libplanet.Net.Consensus.IConsensusMessageCommunicator"/> implementation using <see cref="P:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.Gossip"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.#ctor(Libplanet.Net.Transports.ITransport,System.Collections.Immutable.ImmutableArray{Libplanet.Net.BoundPeer},System.Collections.Immutable.ImmutableArray{Libplanet.Net.BoundPeer},System.Action{Libplanet.Net.Messages.MessageContent})">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator"/>
            class.
            </summary>
            <param name="consensusTransport">An <see cref="T:Libplanet.Net.Transports.ITransport"/> for sending the
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>s to validators.</param>
            <param name="validatorPeers">A list of validator's <see cref="T:Libplanet.Net.BoundPeer"/>,
            including itself.
            </param>
            <param name="seedPeers">A list of seed's <see cref="T:Libplanet.Net.BoundPeer"/>.</param>
            <param name="processMessage">Action to be called when receiving a new
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>.</param>
        </member>
        <member name="P:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.Gossip">
            <summary>
            <see cref="P:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.Gossip"/> of <see cref="T:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.PublishMessage(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.OnStartHeight(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.OnStartRound(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.ValidateMessageToReceive(Libplanet.Net.Messages.Message)">
            <summary>
            Message validator to be called on <see cref="M:Libplanet.Net.Consensus.Gossip.HandleMessageAsync(System.Threading.CancellationToken)"/>.
            This will be set as parameter of <see cref="P:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.Gossip"/>, and will validate
            <see cref="T:Libplanet.Net.Messages.Message"/>s before it's added to the <see cref="F:Libplanet.Net.Consensus.Gossip._cache"/>.
            </summary>
            <param name="message"><see cref="T:Libplanet.Net.Messages.Message"/> to validate.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.ValidateMessageToSend(Libplanet.Net.Messages.MessageContent)">
            <summary>
            Message content validator to be called on <see cref="M:Libplanet.Net.Consensus.Gossip.HandleWantAsync(Libplanet.Net.Messages.Message,System.Threading.CancellationToken)"/>.
            This will be set as parameter of <see cref="P:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.Gossip"/>, and will validate
            <see cref="T:Libplanet.Net.Messages.Message"/>s before respond to peer's <see cref="T:Libplanet.Net.Messages.WantMessage"/>.
            </summary>
            <param name="content"><see cref="T:Libplanet.Net.Messages.MessageContent"/> to validate.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.FilterDifferentHeightVote(Libplanet.Net.Messages.ConsensusVoteMsg)">
            <summary>
            Filter logic for different height <see cref="T:Libplanet.Net.Messages.ConsensusVoteMsg"/>s.
            </summary>
            <param name="voteMsg"><see cref="T:Libplanet.Net.Messages.ConsensusVoteMsg"/> to filter.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.GossipConsensusMessageCommunicator.FilterHigherRoundVoteSpam(Libplanet.Net.Messages.ConsensusVoteMsg,Libplanet.Net.BoundPeer)">
            <summary>
            Spam filter logic for higher round <see cref="T:Libplanet.Net.Messages.ConsensusVoteMsg"/>s.
            </summary>
            <param name="voteMsg"><see cref="T:Libplanet.Net.Messages.ConsensusVoteMsg"/> to filter.</param>
            <param name="peer"><see cref="T:Libplanet.Net.BoundPeer"/> who sent <paramref name="voteMsg"/>.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.HeightVoteSet.GetVoteSet(System.Int32,Libplanet.Types.Consensus.VoteFlag)">
            <summary>
            Gets a <see cref="T:Libplanet.Net.Consensus.VoteSet"/> for given round and flag.
            </summary>
            <param name="round">A round of the <see cref="T:Libplanet.Net.Consensus.VoteSet"/> to get.</param>
            <param name="voteFlag">A vote flag of the <see cref="T:Libplanet.Net.Consensus.VoteSet"/> to get.</param>
            <returns>A <see cref="T:Libplanet.Net.Consensus.VoteSet"/> for given round and flag.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when <see cref="T:Libplanet.Net.Consensus.VoteSet"/> for
            given round does not exist.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="voteFlag"/>
            is not either <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreVote"/> or <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreCommit"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there's no <see cref="T:Libplanet.Net.Consensus.HeightVoteSet.RoundVoteSet"/>
            exists for given <paramref name="round"/>.
            </exception>
        </member>
        <member name="T:Libplanet.Net.Consensus.IConsensusMessageCommunicator">
            <summary>
            Interface for communicating <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>s with peers.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.IConsensusMessageCommunicator.PublishMessage(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            Publish given <paramref name="message"/> to peers.
            </summary>
            <param name="message"><see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to publish.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.IConsensusMessageCommunicator.OnStartHeight(System.Int64)">
            <summary>
            Method that will be called on the
            <see cref="M:Libplanet.Net.Consensus.Context.Start(Libplanet.Types.Blocks.BlockCommit)"/> call.
            </summary>
            <param name="height"><see cref="P:Libplanet.Net.Consensus.Context.Height"/>
            to trigger this method.</param>
        </member>
        <member name="M:Libplanet.Net.Consensus.IConsensusMessageCommunicator.OnStartRound(System.Int32)">
            <summary>
            Method that will be called on the
            <see cref="M:Libplanet.Net.Consensus.Context.StartRound(System.Int32)"/> call.
            </summary>
            <param name="round"><see cref="P:Libplanet.Net.Consensus.Context.Round"/>
            to trigger this method.</param>
        </member>
        <member name="T:Libplanet.Net.Consensus.InvalidConsensusMessageException">
            <summary>
            An exception thrown when a received <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> is invalid.  In particular,
            this is thrown pre-emptively before a <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> is processed, i.e.
            does not change the state of a <see cref="T:Libplanet.Net.Consensus.Context"/> in a meaningful way.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidConsensusMessageException.#ctor(System.String,Libplanet.Net.Messages.MessageContent,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="receivedMessage">The <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> that caused this exception.
            </param>
            <param name="innerException">The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidConsensusMessageException.#ctor(System.String,Libplanet.Net.Messages.MessageContent)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="receivedMessage">The <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> that caused this exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidConsensusMessageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Libplanet.Net.Consensus.InvalidHeightIncreasingException">
            <summary>
            An exception thrown when a <see cref="M:Libplanet.Net.Consensus.ConsensusContext.NewHeight(System.Int64)"/> has called with
            height is not the index of <see cref="P:Libplanet.Blockchain.BlockChain.Tip"/> + 1.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidHeightIncreasingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidHeightIncreasingException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidHeightIncreasingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.InvalidHeightIncreasingException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Libplanet.Net.Consensus.InvalidMaj23Exception">
            <summary>
            An exception thrown when a received <see cref="P:Libplanet.Net.Consensus.InvalidMaj23Exception.Maj23"/> is invalid.  In particular,
            this is thrown pre-emptively before a <see cref="P:Libplanet.Net.Consensus.InvalidMaj23Exception.Maj23"/> is processed, i.e.
            does not change the state of a <see cref="T:Libplanet.Net.Consensus.Context"/> in a meaningful way.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidMaj23Exception.#ctor(System.String,Libplanet.Consensus.Maj23,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="maj23">The <see cref="P:Libplanet.Net.Consensus.InvalidMaj23Exception.Maj23"/> that caused this exception.
            </param>
            <param name="innerException">The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidMaj23Exception.#ctor(System.String,Libplanet.Consensus.Maj23)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="maj23">The <see cref="P:Libplanet.Net.Consensus.InvalidMaj23Exception.Maj23"/> that caused this exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidMaj23Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Libplanet.Net.Consensus.InvalidProposalException">
            <summary>
            An exception thrown when a received <see cref="P:Libplanet.Net.Consensus.InvalidProposalException.Proposal"/> is invalid.  In particular,
            this is thrown pre-emptively before a <see cref="P:Libplanet.Net.Consensus.InvalidProposalException.Proposal"/> is processed, i.e.
            does not change the state of a <see cref="T:Libplanet.Net.Consensus.Context"/> in a meaningful way.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidProposalException.#ctor(System.String,Libplanet.Consensus.Proposal,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="proposal">The <see cref="P:Libplanet.Net.Consensus.InvalidProposalException.Proposal"/> that caused this exception.
            </param>
            <param name="innerException">The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidProposalException.#ctor(System.String,Libplanet.Consensus.Proposal)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="proposal">The <see cref="P:Libplanet.Net.Consensus.InvalidProposalException.Proposal"/> that caused this exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidProposalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Libplanet.Net.Consensus.InvalidVoteException">
            <summary>
            An exception thrown when a received <see cref="P:Libplanet.Net.Consensus.InvalidVoteException.Vote"/> is invalid.  In particular,
            this is thrown pre-emptively before a <see cref="P:Libplanet.Net.Consensus.InvalidVoteException.Vote"/> is processed, i.e.
            does not change the state of a <see cref="T:Libplanet.Net.Consensus.Context"/> in a meaningful way.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidVoteException.#ctor(System.String,Libplanet.Types.Consensus.Vote,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="vote">The <see cref="P:Libplanet.Net.Consensus.InvalidVoteException.Vote"/> that caused this exception.
            </param>
            <param name="innerException">The exception that is the cause of the current exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidVoteException.#ctor(System.String,Libplanet.Types.Consensus.Vote)">
            <summary>
            Initializes a new instance of <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.
            </param>
            <param name="vote">The <see cref="P:Libplanet.Net.Consensus.InvalidVoteException.Vote"/> that caused this exception.
            </param>
        </member>
        <member name="M:Libplanet.Net.Consensus.InvalidVoteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Consensus.InvalidConsensusMessageException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:Libplanet.Net.Consensus.IReactor">
            <summary>
            A interface of consensus reactors.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.IReactor.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a reactor.
            </summary>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>A awaitable tasks from reactor for starting.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.IReactor.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops a reactor.
            </summary>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>A awaitable tasks from reactor for stopping.</returns>
        </member>
        <member name="T:Libplanet.Net.Consensus.MessageCache">
            <summary>
            Cache object that stores recently seen <see cref="T:Libplanet.Net.Messages.Message"/>s.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.MessageCache.#ctor">
            <summary>
            Create a message cache instance that stores
            recently seen <see cref="T:Libplanet.Net.Messages.Message"/>s for gossip.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.MessageCache.Put(Libplanet.Net.Messages.MessageContent)">
            <summary>
            Puts the <paramref name="message"/> into message cache.
            </summary>
            <param name="message">A <see cref="T:Libplanet.Net.Messages.Message"/> to cache.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when a <see cref="T:Libplanet.Net.Messages.Message"/> with the same id already exists.</exception>
        </member>
        <member name="M:Libplanet.Net.Consensus.MessageCache.Get(Libplanet.Net.Messages.MessageId)">
            <summary>
            Gets copied value of the message with <paramref name="id"/>
            if it exists in the message cache.
            </summary>
            <param name="id">A <see cref="T:Libplanet.Net.Messages.MessageId"/> of the <see cref="T:Libplanet.Net.Messages.Message"/> to get.</param>
            <returns>A message with id <paramref name="id"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when a <see cref="T:Libplanet.Net.Messages.Message"/> of id
            <paramref name="id"/> does not exist in the message cache.</exception>
        </member>
        <member name="M:Libplanet.Net.Consensus.MessageCache.DiffFrom(System.Collections.Generic.IEnumerable{Libplanet.Net.Messages.MessageId})">
            <summary>
            Gets the array of <see cref="T:Libplanet.Net.Messages.MessageId"/> of set difference
            <paramref name="ids"/> - <see cref="F:Libplanet.Net.Consensus.MessageCache._messages"/>.
            </summary>
            <param name="ids"><see cref="T:Libplanet.Net.Messages.MessageId"/>s of the <see cref="T:Libplanet.Net.Messages.Message"/>s
            to calculate difference from.</param>
            <returns>Result of set difference operation.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.MessageCache.GetGossipIds">
            <summary>
            Selects at maximum <c>gossip</c> messages used for gossiping.
            </summary>
            <returns>A list of message ids to gossip.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.MessageCache.Clear">
            <summary>
            Clears <see cref="F:Libplanet.Net.Consensus.MessageCache._messages"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.VoteSet.Count">
            <summary>
            Count of the canonical <see cref="T:Libplanet.Types.Consensus.Vote"/>s.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Consensus.VoteSet.TotalCount">
            <summary>
            Count of the all <see cref="T:Libplanet.Types.Consensus.Vote"/>s.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.Contains(Libplanet.Crypto.PublicKey,Libplanet.Types.Blocks.BlockHash)">
            <summary>
            Predicate indicates where the <see cref="T:Libplanet.Net.Consensus.VoteSet"/> have collected a vote with
            given <paramref name="publicKey"/> and <paramref name="blockHash"/>.
            </summary>
            <param name="publicKey">A <see cref="T:Libplanet.Crypto.PublicKey"/> of the <see cref="T:Libplanet.Types.Consensus.Vote"/>.</param>
            <param name="blockHash">A <see cref="T:Libplanet.Types.Blocks.BlockHash"/> of the <see cref="T:Libplanet.Types.Consensus.Vote"/>.</param>
            <returns> <see langword="true"/> when a vote with given params exits,
            else <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.GetVote(Libplanet.Crypto.PublicKey,Libplanet.Types.Blocks.BlockHash)">
            <summary>
            Gets a <see cref="T:Libplanet.Types.Consensus.Vote"/> signed by <paramref name="publicKey"/> and of hash
            <paramref name="blockHash"/>.
            </summary>
            <param name="publicKey">A <see cref="T:Libplanet.Crypto.PublicKey"/> of the <see cref="T:Libplanet.Types.Consensus.Vote"/>.</param>
            <param name="blockHash">A <see cref="T:Libplanet.Types.Blocks.BlockHash"/> of the <see cref="T:Libplanet.Types.Consensus.Vote"/>.</param>
            <returns>A <see cref="T:Libplanet.Types.Consensus.Vote"/> signed by <paramref name="publicKey"/> and of hash
            <paramref name="blockHash"/> if exists. Else, <see langword="null"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.GetVotes(Libplanet.Types.Blocks.BlockHash)">
            <summary>
            Gets all collected <see cref="T:Libplanet.Types.Consensus.Vote"/>s that voted to block with hash
            <paramref name="blockHash"/>.
            </summary>
            <param name="blockHash">
            <see cref="T:Libplanet.Types.Blocks.BlockHash"/> of the <see cref="T:Libplanet.Types.Consensus.Vote"/>s to collect.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Libplanet.Types.Consensus.Vote"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.GetAllVotes">
            <summary>
            Gets all collected <see cref="T:Libplanet.Types.Consensus.Vote"/>s.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Libplanet.Types.Consensus.Vote"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.SetPeerMaj23(Libplanet.Consensus.Maj23)">
            <summary>
            If a peer claims that it has 2/3 majority for given <see cref="T:Libplanet.Types.Blocks.BlockHash"/>,
            modify state by calling this method.
            </summary>
            <param name="maj23">A <see cref="T:Libplanet.Consensus.Maj23"/> received by other validator.</param>
            <returns><see langword="true"/> when given <paramref name="maj23"/> actually modified
            state of the <see cref="T:Libplanet.Net.Consensus.VoteSet"/>, else <see langword="false"/>.</returns>
            <exception cref="T:Libplanet.Net.Consensus.InvalidMaj23Exception">
            Thrown when given <paramref name="maj23"/> has conflicting <see cref="T:Libplanet.Types.Blocks.BlockHash"/>.
            </exception>
            <remarks>if there are too many peers, or too much peer churn,
            this can cause memory issues.</remarks>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.List">
            <summary>
            Returns a copy of the list of <see cref="T:Libplanet.Types.Consensus.Vote"/>s stored by the <see cref="T:Libplanet.Net.Consensus.VoteSet"/>.
            </summary>
            <returns>
            A copy of the list of <see cref="T:Libplanet.Types.Consensus.Vote"/>s stored by the <see cref="T:Libplanet.Net.Consensus.VoteSet"/>.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.MappedList">
            <summary>
            Returns a copy of the list of <see cref="T:Libplanet.Types.Consensus.Vote"/>s stored by the <see cref="T:Libplanet.Net.Consensus.VoteSet"/>.
            If failed to collect <see cref="T:Libplanet.Types.Consensus.Vote"/> from certain peer,
            fill it with nil <see cref="T:Libplanet.Types.Consensus.Vote"/>.
            </summary>
            <returns>
            A copy of the list of <see cref="T:Libplanet.Types.Consensus.Vote"/>s stored by the <see cref="T:Libplanet.Net.Consensus.VoteSet"/>.
            If failed to collect <see cref="T:Libplanet.Types.Consensus.Vote"/> from certain peer,
            fill it with nil <see cref="T:Libplanet.Types.Consensus.Vote"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            Thrown when there are no +2/3 majority <see cref="T:Libplanet.Types.Consensus.Vote"/>s.</exception>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.GetByPublicKey(Libplanet.Crypto.PublicKey)">
            <summary>
            Gets the <see cref="T:Libplanet.Types.Consensus.Vote"/> signed by given <paramref name="publicKey"/>.
            If given validator has conflicting votes, returns "canonical" <see cref="T:Libplanet.Types.Consensus.Vote"/>.
            </summary>
            <param name="publicKey">
            A <see cref="T:Libplanet.Crypto.PublicKey"/> of the validator signed <see cref="T:Libplanet.Types.Consensus.Vote"/>.</param>
            <returns>A <see cref="T:Libplanet.Types.Consensus.Vote"/> signed by given <paramref name="publicKey"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when there's no <see cref="T:Libplanet.Types.Consensus.Vote"/>
            signed by given <paramref name="publicKey"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.HasTwoThirdsMajority">
            <summary>If there is a +2/3 majority for certain <see cref="T:Libplanet.Types.Blocks.BlockHash"/>,
            return <see langword="true"/>. Else, return <see langword="false"/>.</summary>
            <returns><see langword="true"/> if +2/3 majority exists,
            else <see langword="false"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.IsCommit">
            <summary>
            A predicate indicates whether the <see cref="T:Libplanet.Net.Consensus.VoteSet"/> collected +2/3 majority commits.
            </summary>
            <returns><see langword="true"/> if the <see cref="T:Libplanet.Net.Consensus.VoteSet"/> collected +2/3 majority
            commits, else <see langword="false"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.HasOneThirdsAny">
            <summary>If there is a +1/3 majority for any <see cref="T:Libplanet.Types.Blocks.BlockHash"/>,
            return <see langword="true"/>. Else, return <see langword="false"/>.</summary>
            <returns><see langword="true"/> if +1/3 majority exists,
            else <see langword="false"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.HasTwoThirdsAny">
            <summary>If there is a +2/3 majority for any <see cref="T:Libplanet.Types.Blocks.BlockHash"/>,
            return <see langword="true"/>. Else, return <see langword="false"/>.</summary>
            <returns><see langword="true"/> if +2/3 majority exists,
            else <see langword="false"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.HasAll">
            <summary>
            Predicate which returns <see langword="true"/> when collected all <see cref="T:Libplanet.Types.Consensus.Vote"/>s.
            Else, return <see langword="false"/>.
            </summary>
            <returns><see langword="true"/> when collected all <see cref="T:Libplanet.Types.Consensus.Vote"/>s.
            Else, <see langword="false"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.TwoThirdsMajority(Libplanet.Types.Blocks.BlockHash@)">
            <summary>If there is a +2/3 majority for certain <see cref="T:Libplanet.Types.Blocks.BlockHash"/>,
            return <see cref="T:Libplanet.Types.Blocks.BlockHash"/> and <see langword="true"/>.
            Else, return the <see langword="default"/> <see cref="T:Libplanet.Types.Blocks.BlockHash"/> and
            <see langword="false"/>.</summary>
            <param name="blockHash"><see cref="T:Libplanet.Types.Blocks.BlockHash"/> of the +2/3 majority vote.
            If not exists, it will have <see langword="default"/>.</param>
            <returns><see langword="true"/> if +2/3 majority exists,
            else <see langword="false"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Consensus.VoteSet.ToBlockCommit">
            <summary>
            Create a <see cref="T:Libplanet.Types.Blocks.BlockCommit"/> instance if <see cref="T:Libplanet.Net.Consensus.VoteSet"/> has +2/3 majority
            commits.
            </summary>
            <returns>A <see cref="T:Libplanet.Types.Blocks.BlockCommit"/> instance made by collected commits. If failed
            to collect +2/3 majority commits, return <see langword="null"/>.</returns>
        </member>
        <member name="T:Libplanet.Net.DifferentAppProtocolVersionEncountered">
            <summary>
            A delegate to call back when a <see cref="T:Libplanet.Net.Swarm"/> encounters
            a peer with a different <see cref="T:Libplanet.Net.AppProtocolVersion"/> signed by
            a trusted signer in the network.
            </summary>
            <param name="peer">The encountered <see cref="T:Libplanet.Net.BoundPeer"/> with
            a different <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            </param>
            <param name="peerVersion">The encountered different <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            </param>
            <param name="localVersion">The currently running application's
            <see cref="T:Libplanet.Net.AppProtocolVersion"/>.</param>
        </member>
        <member name="M:Libplanet.Net.IceServer.#ctor(System.Uri)">
            <summary>
            Creates an instance by parsing given <paramref name="url"/>.
            </summary>
            <param name="url">The <see cref="T:System.Uri"/> to parse.</param>
            <exception cref="T:System.ArgumentException">Thrown when <see cref="P:System.Uri.Scheme"/> is
            not <c>"turn"</c> for <paramref name="url"/>.</exception>
        </member>
        <member name="P:Libplanet.Net.Messages.BlockHashesMsg.StartIndex">
            <summary>
            The block index of the first hash in <see cref="P:Libplanet.Net.Messages.BlockHashesMsg.Hashes"/>.
            It is <see langword="null"/> iff <see cref="P:Libplanet.Net.Messages.BlockHashesMsg.Hashes"/> are empty.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.BlockHashesMsg.Hashes">
            <summary>
            The continuous block hashes, from the lowest index to the highest index.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.BlocksMsg.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Creates an instance of <see cref="T:Libplanet.Net.Messages.BlocksMsg"/> with given <paramref name="payloads"/>.
            </summary>
            <param name="payloads">The payload for this <see cref="T:Libplanet.Net.Messages.Message"/>.  The length
            should be twice the length of <see cref="T:Libplanet.Types.Blocks.Block"/>s to send where even indices are
            encoded <see cref="T:Libplanet.Types.Blocks.Block"/>s and odd indices are encoded <see cref="T:Libplanet.Types.Blocks.BlockCommit"/>s.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when the length of
            <paramref name="payloads"/> is not even.</exception>
        </member>
        <member name="P:Libplanet.Net.Messages.BlocksMsg.Payloads">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see langword="byte"/> arrays representing the payload
            of this <see cref="T:Libplanet.Net.Messages.Message"/>.  Even indices are encoded <see cref="T:Libplanet.Types.Blocks.Block"/>s
            and odd indices are encoded <see cref="T:Libplanet.Types.Blocks.BlockCommit"/>s.
            </summary>
            <remarks>
            This is guaranteed to be of even length.
            </remarks>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusMaj23Msg">
            <summary>
            A message class for claiming that the peer has +2/3 votes.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMaj23Msg.#ctor(Libplanet.Consensus.Maj23)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusMaj23Msg"/> class.
            </summary>
            <param name="maj23">A <see cref="P:Libplanet.Net.Messages.ConsensusMaj23Msg.Maj23"/> of given height and round.</param>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMaj23Msg.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusMaj23Msg"/> class
            with marshalled message.
            </summary>
            <param name="dataframes">A marshalled message.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusMaj23Msg.Maj23">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusMaj23Msg.Maj23"/> of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusMaj23Msg.DataFrames">
            <inheritdoc cref="P:Libplanet.Net.Messages.MessageContent.DataFrames"/>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusMaj23Msg.Type">
            <inheritdoc cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMaj23Msg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMaj23Msg.Equals(System.Object)">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.Equals(System.Object)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMaj23Msg.GetHashCode">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.GetHashCode"/>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusMsg">
            <summary>
            A abstract base class message for consensus.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMsg.#ctor(Libplanet.Crypto.PublicKey,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> class.
            </summary>
            <param name="validatorPublicKey">
            A <see cref="T:Libplanet.Crypto.PublicKey"/> of the validator who made this message.</param>
            <param name="height">A <see cref="P:Libplanet.Net.Consensus.Context.Height"/> the message is for.</param>
            <param name="round">A <see cref="P:Libplanet.Net.Consensus.Context.Round"/> the message is written for.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusMsg.ValidatorPublicKey">
            <summary>
            A <see cref="T:Libplanet.Crypto.PublicKey"/> of the validator who made this message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusMsg.Height">
            <summary>
            A <see cref="P:Libplanet.Net.Consensus.Context.Height"/> the message is written for.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusMsg.Round">
            <summary>
            A <see cref="P:Libplanet.Net.Consensus.Context.Round"/> the message is written for.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <summary>
            Indicates whether the current <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>
            is equal to another <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>.
            </summary>
            <param name="other">An <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> to compare with this
            <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/>.</param>
            <returns>
            true if the current <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> is equal to the other parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMsg.Equals(System.Object)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusMsg.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusPreCommitMsg">
            <summary>
            A message class for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreCommitMsg.#ctor(Libplanet.Types.Consensus.Vote)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusPreCommitMsg"/> class.
            </summary>
            <param name="vote">The <see cref="T:Libplanet.Types.Consensus.Vote"/> for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/>
            to attach.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="vote"/>'s
            <see cref="P:Libplanet.Types.Consensus.Vote.Flag"/> is not <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreCommit"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreCommitMsg.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusPreCommitMsg"/> class
            with marshalled message.
            </summary>
            <param name="dataframes">A marshalled message.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusPreCommitMsg.PreCommit">
            <summary>
            A <see cref="T:Libplanet.Types.Consensus.Vote"/> for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreCommit"/>.  This will always
            have its <see cref="P:Libplanet.Types.Consensus.Vote.Flag"/> set to <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreCommit"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusPreCommitMsg.DataFrames">
            <inheritdoc cref="P:Libplanet.Net.Messages.MessageContent.DataFrames"/>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusPreCommitMsg.Type">
            <inheritdoc cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreCommitMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreCommitMsg.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreCommitMsg.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusPreVoteMsg">
            <summary>
            A message class for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreVoteMsg.#ctor(Libplanet.Types.Consensus.Vote)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusPreVoteMsg"/> class.
            </summary>
            <param name="vote">The <see cref="T:Libplanet.Types.Consensus.Vote"/> for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/>
            to attach.
            </param>
            <exception cref="T:System.ArgumentException">Thrown when given <paramref name="vote"/>'s
            <see cref="P:Libplanet.Types.Consensus.Vote.Flag"/> is not <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreVote"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreVoteMsg.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusPreVoteMsg"/> class
            with marshalled message.
            </summary>
            <param name="dataframes">A marshalled message.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusPreVoteMsg.PreVote">
            <summary>
            A <see cref="T:Libplanet.Types.Consensus.Vote"/> for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.PreVote"/>.  This will always
            have its <see cref="P:Libplanet.Types.Consensus.Vote.Flag"/> set to <see cref="F:Libplanet.Types.Consensus.VoteFlag.PreVote"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusPreVoteMsg.DataFrames">
            <inheritdoc cref="P:Libplanet.Net.Messages.MessageContent.DataFrames"/>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusPreVoteMsg.Type">
            <inheritdoc cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreVoteMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreVoteMsg.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusPreVoteMsg.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusProposalClaimMsg">
            <summary>
            A message class for claiming a <see cref="T:Libplanet.Consensus.Proposal"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalClaimMsg.#ctor(Libplanet.Consensus.ProposalClaim)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusProposalClaimMsg"/> class.
            </summary>
            <param name="proposalClaim">A <see cref="P:Libplanet.Net.Messages.ConsensusProposalClaimMsg.ProposalClaim"/> of given height,
            round and <see cref="T:Libplanet.Types.Blocks.BlockHash"/>.</param>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalClaimMsg.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusProposalClaimMsg"/> class
            with marshalled message.
            </summary>
            <param name="dataframes">A marshalled message.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalClaimMsg.ProposalClaim">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusProposalClaimMsg.ProposalClaim"/> of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalClaimMsg.DataFrames">
            <inheritdoc cref="P:Libplanet.Net.Messages.MessageContent.DataFrames"/>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalClaimMsg.Type">
            <inheritdoc cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalClaimMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalClaimMsg.Equals(System.Object)">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.Equals(System.Object)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalClaimMsg.GetHashCode">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.GetHashCode"/>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusProposalMsg">
            <summary>
            A message class for <see cref="F:Libplanet.Net.Consensus.ConsensusStep.Propose"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalMsg.#ctor(Libplanet.Consensus.Proposal)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusProposalMsg"/> class.
            </summary>
            <param name="proposal">A <see cref="P:Libplanet.Net.Messages.ConsensusProposalMsg.Proposal"/> of given height and round.</param>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalMsg.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusProposalMsg"/> class
            with marshalled message.
            </summary>
            <param name="dataframes">A marshalled message.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalMsg.Proposal">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusProposalMsg.Proposal"/> of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalMsg.BlockHash">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusProposalMsg.BlockHash"/> the message is written for.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalMsg.DataFrames">
            <inheritdoc cref="P:Libplanet.Net.Messages.MessageContent.DataFrames"/>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusProposalMsg.Type">
            <inheritdoc cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalMsg.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusProposalMsg.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusVoteMsg">
            <summary>
            A abstract base class message for consensus.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusVoteMsg.#ctor(Libplanet.Crypto.PublicKey,System.Int64,System.Int32,Libplanet.Types.Blocks.BlockHash,Libplanet.Types.Consensus.VoteFlag)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusMsg"/> class.
            </summary>
            <param name="validatorPublicKey">
            A <see cref="T:Libplanet.Crypto.PublicKey"/> of the validator who made this message.</param>
            <param name="height">A <see cref="P:Libplanet.Net.Consensus.Context.Height"/> the message is for.</param>
            <param name="round">A <see cref="P:Libplanet.Net.Consensus.Context.Round"/> the message is written for.</param>
            <param name="blockHash">A <see cref="P:Libplanet.Net.Messages.ConsensusVoteMsg.BlockHash"/> the message is written for.</param>
            <param name="flag">A <see cref="T:Libplanet.Types.Consensus.VoteFlag"/>.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusVoteMsg.BlockHash">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusVoteMsg.BlockHash"/> the message is written for.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusVoteMsg.Flag">
            <summary>
            A <see cref="T:Libplanet.Types.Consensus.VoteFlag"/> of message's vote.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg">
            <summary>
            A message class for requesting lacking <see cref="T:Libplanet.Types.Consensus.Vote"/>s
            by sending the <see cref="T:Libplanet.Types.Consensus.Vote"/>s that the peer has.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.#ctor(Libplanet.Consensus.VoteSetBits)">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg"/> class.
            </summary>
            <param name="voteSetBits">A <see cref="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.VoteSetBits"/> of given height and round.</param>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.#ctor(System.Byte[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg"/> class
            with marshalled message.
            </summary>
            <param name="dataframes">A marshalled message.</param>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.VoteSetBits">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.VoteSetBits"/> of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.BlockHash">
            <summary>
            A <see cref="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.BlockHash"/> of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.DataFrames">
            <inheritdoc cref="P:Libplanet.Net.Messages.MessageContent.DataFrames"/>
        </member>
        <member name="P:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.Type">
            <inheritdoc cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.Equals(Libplanet.Net.Messages.ConsensusMsg)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.Equals(System.Object)">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.Equals(System.Object)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.ConsensusVoteSetBitsMsg.GetHashCode">
            <inheritdoc cref="M:Libplanet.Net.Messages.ConsensusMsg.GetHashCode"/>
        </member>
        <member name="T:Libplanet.Net.Messages.DifferentVersionMsg">
            <summary>
            A reply to any messages with different <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            Contains the expected and actual <see cref="T:Libplanet.Net.AppProtocolVersion"/>
            value of the message.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Messages.FindNeighborsMsg">
            <summary>
            Message containing request for nearby peers.
            </summary>
            <seealso cref="T:Libplanet.Net.Messages.NeighborsMsg"/>
        </member>
        <member name="T:Libplanet.Net.Messages.HaveMessage">
            <summary>
            List of message IDs that the peer seen recently.
            </summary>
            <seealso cref="T:Libplanet.Net.Messages.WantMessage"/>
        </member>
        <member name="M:Libplanet.Net.Messages.IMessageCodec`1.Encode(Libplanet.Net.Messages.MessageContent,Libplanet.Crypto.PrivateKey,Libplanet.Net.AppProtocolVersion,Libplanet.Net.BoundPeer,System.DateTimeOffset,System.Byte[])">
            <summary>
            Encodes the message to <see typeref="T"/>-typed instance with given
            <paramref name="privateKey"/> and <paramref name="peer"/>.
            </summary>
            <param name="content">The message body to encode.</param>
            <param name="privateKey">The <see cref="T:Libplanet.Crypto.PrivateKey"/> to sign the encoded message.
            </param>
            <param name="appProtocolVersion">The <see cref="T:Libplanet.Net.AppProtocolVersion"/> of
            the transport layer.</param>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/>-typed representation of
            the transport layer.
            <seealso cref="P:Libplanet.Net.Transports.ITransport.AsPeer"/></param>
            <param name="timestamp">The <see cref="T:System.DateTimeOffset"/> of the time
            <paramref name="content"/> is encoded.
            </param>
            <param name="identity">The byte array identifies the message to match between
            message and its respond used in <see cref="N:NetMQ"/>.</param>
            <returns>A <see typeref="T"/> containing the signed <see cref="T:Libplanet.Net.Messages.MessageContent"/>.
            </returns>
            <exception cref="T:Libplanet.Net.Transports.InvalidCredentialException">Thrown when <paramref name="privateKey"/>'s
            <see cref="T:Libplanet.Crypto.PublicKey"/> does not match that of <paramref name="peer"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Messages.IMessageCodec`1.Decode(`0,System.Boolean)">
            <summary>
            Decodes given <see typeref="T"/>-typed <paramref name="encoded"/> into
            <see cref="T:Libplanet.Net.Messages.Message"/> and checks its validity.
            <seealso cref="M:Libplanet.Net.Messages.IMessageCodec`1.Encode(Libplanet.Net.Messages.MessageContent,Libplanet.Crypto.PrivateKey,Libplanet.Net.AppProtocolVersion,Libplanet.Net.BoundPeer,System.DateTimeOffset,System.Byte[])"/>
            </summary>
            <param name="encoded">A <see typeref="T"/>-typed instance to parse.</param>
            <param name="reply">A flag to express whether the target is a reply of other message.
            </param>
            <returns>A <see cref="T:Libplanet.Net.Messages.Message"/> parsed from <paramref name="encoded"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when empty <paramref name="encoded"/>
            is given.</exception>
            <exception cref="T:Libplanet.Net.Transports.InvalidMessageSignatureException">Thrown when the signer of
            <paramref name="encoded"/> is invalid.</exception>
        </member>
        <member name="P:Libplanet.Net.Messages.Message.Content">
            <summary>
            The body of the message that contains the message type and data.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.Message.Version">
            <summary>
            The <see cref="T:Libplanet.Net.AppProtocolVersion"/> of sender of the <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.Message.Remote">
            <summary>
            The <see cref="T:Libplanet.Net.BoundPeer"/> representation of sender of the given <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.Message.Timestamp">
            <summary>
            The <see cref="T:System.DateTimeOffset"/> of the <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.Message.Identity">
            <summary>
            The byte array identifies the message to match between
            message and its respond used in <see cref="N:NetMQ"/>.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Messages.MessageContent">
            <summary>
            Serves as the base class for messages used in <see cref="T:Libplanet.Net.Transports.ITransport"/>.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Messages.MessageContent.MessageType">
            <summary>
            <c>Enum</c> represents the type of the <see cref="T:Libplanet.Net.Messages.MessageContent"/>.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.Ping">
            <summary>
            Check message to determine peer is alive.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.Pong">
            <summary>
            A reply to <see cref="F:Libplanet.Net.Messages.MessageContent.MessageType.Ping"/>.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.GetBlockHashes">
            <summary>
            Request to query block hashes.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.TxIds">
            <summary>
            Inventory to transfer transactions.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.GetBlocks">
            <summary>
            Request to query blocks.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.GetTxs">
            <summary>
            Request to query transactions.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.Blocks">
            <summary>
            Message containing serialized blocks.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.Tx">
            <summary>
            Message containing serialized transaction.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.FindNeighbors">
            <summary>
            Message containing request for nearby peers.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.Neighbors">
            <summary>
            Message containing nearby peers.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.BlockHeaderMessage">
            <summary>
            Message containing a single <see cref="T:Libplanet.Types.Blocks.BlockHeader"/>.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.BlockHashes">
            <summary>
            Message containing demand block hashes with their index numbers.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.GetChainStatus">
            <summary>
            Request current chain status of the peer.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ChainStatus">
            <summary>
            A reply to <see cref="F:Libplanet.Net.Messages.MessageContent.MessageType.GetChainStatus"/>.
            Contains the chain status of the peer at the moment.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.DifferentVersion">
            <summary>
            A reply to any messages with different <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            Contains the expected and actual <see cref="T:Libplanet.Net.AppProtocolVersion"/>
            value of the message.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.HaveMessage">
            <summary>
            List of message IDs that the peer seen recently.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.WantMessage">
            <summary>
            List of message IDs that the peer want to have.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ConsensusProposal">
            <summary>
            Consensus proposal message.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ConsensusVote">
            <summary>
            Consensus vote message.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ConsensusCommit">
            <summary>
            Consensus commit message.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ConsensusMaj23Msg">
            <summary>
            Consensus message that informs other peer that the peer has a vote of majority 2/3.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ConsensusVoteSetBitsMsg">
            <summary>
            Consensus message that informs vote sets that the peer have to other peer.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageContent.MessageType.ConsensusProposalClaimMsg">
            <summary>
            Consensus message that informs vote sets that the peer received new maj23 block.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageContent.Type">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageContent.DataFrames">
            <summary>
            The body of the message.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageContent.Id">
            <summary>
            A bytearray representing SHA-256 digest of <see cref="T:Libplanet.Net.Messages.MessageContent"/>.
            </summary>
            <returns>A mutable <see cref="T:System.Byte"/> array representing
            SHA-256 digest of <see cref="T:Libplanet.Net.Messages.Message"/>.
            </returns>
        </member>
        <member name="T:Libplanet.Net.Messages.MessageId">
            <summary>
            <see cref="T:Libplanet.Net.Messages.MessageId"/>, abbreviation of message identifier,
            is a SHA-256 digest derived from a <see cref="T:Libplanet.Net.Messages.Message"/>'s
            content.
            <para>As it is a SHA-256 digest, it consists of 32 <see cref="T:System.Byte"/>s,
            and 64 characters in hexadecimal.
            (See also <see cref="F:Libplanet.Net.Messages.MessageId.Size"/> constant.)</para>
            </summary>
            <seealso cref="P:Libplanet.Net.Messages.MessageContent.Id"/>
        </member>
        <member name="F:Libplanet.Net.Messages.MessageId.Size">
            <summary>
            The <see cref="T:System.Byte"/>s size that each <see cref="T:Libplanet.Net.Messages.MessageId"/> takes.
            <para>As a message ID is a SHA-256 digest, it is 32 <see cref="T:System.Byte"/>s.
            </para>
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.#ctor(System.Byte[])">
            <summary>
            Converts a <see cref="T:System.Byte"/> array into a <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            </summary>
            <param name="messageId">A <see cref="T:System.Byte"/> array that encodes
            a <see cref="T:Libplanet.Net.Messages.MessageId"/>.  It must not be <see langword="null"/>,
            and its <see cref="P:System.Array.Length"/> must be the same to
            <see cref="F:Libplanet.Net.Messages.MessageId.Size"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the given
            <paramref name="messageId"/>'s <see cref="P:System.Array.Length"/> is not
            the same to the required <see cref="F:Libplanet.Net.Messages.MessageId.Size"/>.</exception>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageId.ByteArray">
            <summary>
            A bare immutable <see cref="T:System.Byte"/> array of
            this <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            </summary>
            <remarks>It is immutable.  For a mutable array, use
            <see cref="M:Libplanet.Net.Messages.MessageId.ToByteArray"/> method instead.</remarks>
            <seealso cref="M:Libplanet.Net.Messages.MessageId.ToByteArray"/>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.FromHex(System.String)">
            <summary>
            Creates a <see cref="T:Libplanet.Net.Messages.MessageId"/> value from a <paramref name="hex"/> string.
            </summary>
            <param name="hex">A hexadecimal string which encodes a <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            This has to contain 64 hexadecimal digits and must not be <see langword="null"/>
            This is usually made by <see cref="M:Libplanet.Net.Messages.MessageId.ToHex"/> method.</param>
            <returns>A corresponding <see cref="T:Libplanet.Net.Messages.MessageId"/> value.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the given <paramref name="hex"/>
            string is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the given
            <paramref name="hex"/> is shorter or longer than 64 characters.</exception>
            <exception cref="T:System.FormatException">Thrown when the given <paramref name="hex"/> string is
            not a valid hexadecimal string.</exception>
            <seealso cref="M:Libplanet.Net.Messages.MessageId.ToHex"/>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.ToByteArray">
            <summary>
            Gets a bare mutable <see cref="T:System.Byte"/> array of
            this <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            </summary>
            <returns>A new mutable <see cref="T:System.Byte"/> array of
            this <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            Since a returned array is created every time the method is called,
            any mutations on that array does not affect to
            the <see cref="T:Libplanet.Net.Messages.MessageId"/> object.
            </returns>
            <seealso cref="P:Libplanet.Net.Messages.MessageId.ByteArray"/>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.ToHex">
            <summary>
            Gets a hexadecimal form of a <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            </summary>
            <returns>64 hexadecimal characters.</returns>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.ToString">
            <summary>
            Gets a <see cref="T:Libplanet.Net.Messages.MessageId"/>'s representative string.
            </summary>
            <returns>A string which represents this <see cref="T:Libplanet.Net.Messages.MessageId"/>.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.CompareTo(Libplanet.Net.Messages.MessageId)">
            <inheritdoc cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.CompareTo(System.Object)">
            <inheritdoc cref="M:System.IComparable.CompareTo(System.Object)"/>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Libplanet.Net.Messages.MessageValidator">
            <summary>
            A helper class for an <see cref="T:Libplanet.Net.Messages.IMessageCodec`1"/> to validate
            a decoded <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageValidator.Apv">
            <summary>
            <para>
            The local <see cref="T:Libplanet.Net.AppProtocolVersion"/> used for
            <see cref="M:Libplanet.Net.Messages.IMessageCodec`1.Encode(Libplanet.Net.Messages.MessageContent,Libplanet.Crypto.PrivateKey,Libplanet.Net.AppProtocolVersion,Libplanet.Net.BoundPeer,System.DateTimeOffset,System.Byte[])"/> and <see cref="M:Libplanet.Net.Messages.IMessageCodec`1.Decode(`0,System.Boolean)"/> methods.
            </para>
            <para>
            In particular, this is used in the following cases:
            <list type="bullet">
                <item><description>
                    When encoding, this value is attached to the encoded output.
                </description></item>
                <item><description>
                    When decoding, the encoded message's <see cref="T:Libplanet.Net.AppProtocolVersion"/> must
                    match this value.
                </description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageValidator.TrustedApvSigners">
            <summary>
            <para>
            An <see cref="T:System.Collections.Immutable.IImmutableSet`1"/> of <see cref="T:Libplanet.Crypto.Address"/>es to trust as a signer
            when a different <see cref="T:Libplanet.Net.AppProtocolVersion"/> is encountered.
            </para>
            <para>
            Whether to trust an unknown <see cref="T:Libplanet.Net.AppProtocolVersion"/>, i.e.
            an <see cref="T:Libplanet.Net.AppProtocolVersion"/> that is different
            from <see cref="P:Libplanet.Net.Messages.MessageValidator.Apv"/>.  An <see cref="T:Libplanet.Net.AppProtocolVersion"/> is trusted if it is signed
            by one of the signers in the set.  In particular, if the set is empty,
            no <see cref="T:Libplanet.Net.AppProtocolVersion"/> is trusted.
            </para>
            </summary>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageValidator.DifferentApvEncountered">
            <summary>
            A callback method that gets invoked when a an <see cref="T:Libplanet.Net.AppProtocolVersion"/>
            by a <em>trusted</em> signer that is different from <see cref="P:Libplanet.Net.Messages.MessageValidator.Apv"/> is encountered.
            </summary>
            <remarks>
            If <see langword="null"/>, no action is taken.
            </remarks>
        </member>
        <member name="P:Libplanet.Net.Messages.MessageValidator.MessageTimestampBuffer">
            <summary>
            <para>
            The <see cref="T:System.TimeSpan"/> to use as a buffer when decoding <see cref="T:Libplanet.Net.Messages.Message"/>s.
            </para>
            <para>
            Whether a decoded <see cref="T:Libplanet.Net.Messages.Message"/> is valid or not depends on this value:
            <list type="bullet">
                <item><description>
                    If <see langword="null"/>, there is no restriction
                    on <see cref="P:Libplanet.Net.Messages.Message.Timestamp"/> for received <see cref="T:Libplanet.Net.Messages.Message"/>s.
                </description></item>
                <item><description>
                    If not <see langword="null"/>, the absolute difference between the timestamp of
                    a received <see cref="T:Libplanet.Net.Messages.Message"/> and current time should be less than
                    this value.
                </description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageValidator.ValidateAppProtocolVersion(Libplanet.Net.Messages.Message)">
            <summary>
            Validates an <see cref="T:Libplanet.Net.AppProtocolVersion"/> against <see cref="P:Libplanet.Net.Messages.MessageValidator.Apv"/>.
            Any <see cref="T:Libplanet.Net.AppProtocolVersion"/> that is different from <see cref="P:Libplanet.Net.Messages.MessageValidator.Apv"/> is
            considered invalid and an <see cref="T:Libplanet.Net.Transports.DifferentAppProtocolVersionException"/> will be
            thrown.
            </summary>
            <param name="message">The <see cref="T:Libplanet.Net.Messages.Message"/> to validate.</param>
            <remarks>
            If <see cref="P:Libplanet.Net.Messages.Message.Version"/> of <paramref name="message"/> is not valid but
            is signed by a trusted signer, then <see cref="P:Libplanet.Net.Messages.MessageValidator.DifferentApvEncountered"/> is called.
            </remarks>
            <exception cref="T:System.NullReferenceException">Thrown when <see cref="P:Libplanet.Net.Messages.Message.Remote"/> is
            <see langword="null"/> for <paramref name="message"/>.</exception>
            <exception cref="T:Libplanet.Net.Transports.DifferentAppProtocolVersionException">Thrown when
            local version does not match with given <paramref name="message"/>'s
            <see cref="P:Libplanet.Net.Messages.Message.Version"/>.</exception>
            <seealso cref="P:Libplanet.Net.Messages.MessageValidator.Apv"/>
            <seealso cref="P:Libplanet.Net.Messages.MessageValidator.TrustedApvSigners"/>
            <seealso cref="P:Libplanet.Net.Messages.MessageValidator.DifferentApvEncountered"/>
        </member>
        <member name="M:Libplanet.Net.Messages.MessageValidator.ValidateTimestamp(Libplanet.Net.Messages.Message)">
            <summary>
            Validates a <see cref="T:System.DateTimeOffset"/> timestamp against current timestamp.
            </summary>
            <param name="message">The <see cref="T:Libplanet.Net.Messages.Message"/> to validate.</param>
            <exception cref="T:Libplanet.Net.Transports.InvalidMessageTimestampException">Thrown when the timestamp of
            <paramref name="message"/> is invalid.</exception>
            <seealso cref="P:Libplanet.Net.Messages.MessageValidator.MessageTimestampBuffer"/>.
        </member>
        <member name="T:Libplanet.Net.Messages.NeighborsMsg">
            <summary>
            Message containing nearby peers. A reply to <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/>.
            </summary>
            <seealso cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/>
        </member>
        <member name="M:Libplanet.Net.Messages.NetMQMessageCodec.#ctor">
            <summary>
            Creates a <see cref="T:Libplanet.Net.Messages.NetMQMessageCodec"/> instance.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.NetMQMessageCodec.MessageFrame.Version">
            <summary>
            Frame containing <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.NetMQMessageCodec.MessageFrame.Type">
            <summary>
            Frame containing the type of the message.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.NetMQMessageCodec.MessageFrame.Peer">
            <summary>
            Frame containing the sender <see cref="T:Libplanet.Net.BoundPeer"/> of the<see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.NetMQMessageCodec.MessageFrame.Timestamp">
            <summary>
            Frame containing the datetime when the <see cref="T:Libplanet.Net.Messages.Message"/> is created.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Messages.NetMQMessageCodec.MessageFrame.Sign">
            <summary>
            Frame containing signature of the <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Messages.NetMQMessageCodec.Encode(Libplanet.Net.Messages.MessageContent,Libplanet.Crypto.PrivateKey,Libplanet.Net.AppProtocolVersion,Libplanet.Net.BoundPeer,System.DateTimeOffset,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Messages.NetMQMessageCodec.ParseMessageType(NetMQ.NetMQMessage,System.Boolean)">
            <summary>
            Parses a <see cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/> from given <see cref="T:NetMQ.NetMQMessage"/>.
            </summary>
            <param name="encoded">A encoded <see cref="T:NetMQ.NetMQMessage"/>.</param>
            <param name="reply">A flag to express whether the target is a reply of other message.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if given <see cref="T:NetMQ.NetMQMessage"/>
            has not enough <see cref="T:NetMQ.NetMQFrame"/> for parsing a message type.</exception>
            <returns>Returns a <see cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/> of given
            <paramref name="encoded"/>. If given value cannot be
            interpreted in <see cref="T:Libplanet.Net.Messages.MessageContent.MessageType"/>,
            this would return a integer number.</returns>
        </member>
        <member name="M:Libplanet.Net.Messages.NetMQMessageCodec.Decode(NetMQ.NetMQMessage,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Libplanet.Net.Messages.PingMsg">
            <summary>
            Check message to determine peer is alive.
            </summary>
            <seealso cref="T:Libplanet.Net.Messages.PongMsg"/>
        </member>
        <member name="T:Libplanet.Net.Messages.PongMsg">
            <summary>
            A reply to <see cref="T:Libplanet.Net.Messages.PingMsg"/>.
            </summary>
            <seealso cref="T:Libplanet.Net.Messages.PingMsg"/>
        </member>
        <member name="T:Libplanet.Net.Messages.WantMessage">
            <summary>
            List of message IDs that the peer want to have.
            </summary>
            <seealso cref="T:Libplanet.Net.Messages.HaveMessage"/>
        </member>
        <member name="T:Libplanet.Net.Options.AppProtocolVersionOptions">
            <summary>
            Various options for a <see cref="T:Libplanet.Net.Swarm"/>'s
            <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.AppProtocolVersionOptions.AppProtocolVersion">
            <summary>
            The application protocol version to comply.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.AppProtocolVersionOptions.TrustedAppProtocolVersionSigners">
            <summary>
            The set of <see cref="T:Libplanet.Crypto.PublicKey"/>s to trust when a node encounters
            a <see cref="T:Libplanet.Net.Messages.Message"/> with an <see cref="T:Libplanet.Net.AppProtocolVersion"/> that is different
            from <see cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.AppProtocolVersion"/>.  Any <see cref="T:Libplanet.Net.Messages.Message"/> with an untrusted
            <see cref="T:Libplanet.Net.AppProtocolVersion"/> is ignored by the node.  Set to an
            empty set of <see cref="T:Libplanet.Crypto.PublicKey"/>s by default, i.e. not to trust any
            <see cref="T:Libplanet.Net.Messages.Message"/> with a different <see cref="T:Libplanet.Net.AppProtocolVersion"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.AppProtocolVersionOptions.DifferentAppProtocolVersionEncountered">
            <summary>
            The callback triggered when a node encounters
            an <see cref="T:Libplanet.Net.AppProtocolVersion"/> that is different from
            <see cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.AppProtocolVersion"/> that is signed by
            a <em>trusted party</em>, that is, one of
            <see cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.TrustedAppProtocolVersionSigners"/>.  Does nothing by default.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.BootstrapOptions.DialTimeout">
            <summary>
            Determines how long an <see cref="T:Libplanet.Net.Transports.ITransport"/> should wait before timimg out
            when dialing peers for either <see cref="T:Libplanet.Net.Messages.PongMsg"/>, <see cref="T:Libplanet.Net.Messages.NeighborsMsg"/>,
            or <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/> during a bootstrapping phase.  Generally, a more relaxed
            <see cref="T:System.TimeSpan"/> is used compared to <see cref="P:Libplanet.Net.Options.TimeoutOptions.DialTimeout"/>.
            Set to <see cref="F:Libplanet.Net.Options.BootstrapOptions.DefaultDialTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.TimeoutOptions.DialTimeout"/>
        </member>
        <member name="P:Libplanet.Net.Options.BootstrapOptions.SeedPeers">
            <summary>
            The list of seed peers to connect to.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.BootstrapOptions.SearchDepth">
            <summary>
            Determines the depth of the search when discovering neighbors for the local node.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Options.HostOptions">
            <summary>
            Various options for determining <see cref="T:Libplanet.Net.Swarm"/>'s <see cref="T:Libplanet.Net.BoundPeer"/> identity.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.HostOptions.Host">
            <summary>
            The hostname to be a part of a public endpoint that peers may use when
            they connect to this node.  This is set to <see langword="null"/> when
            a non-empty <see cref="P:Libplanet.Net.Options.HostOptions.IceServers"/> is provided.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.HostOptions.IceServers">
            <summary>
            The set of
            <a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment">ICE</a>
            servers to use for TURN/STUN to traverse NAT.  This is empty when <see cref="P:Libplanet.Net.Options.HostOptions.Host"/>
            is provided.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.HostOptions.Port">
            <summary>
            The port number to use for the host.  If set to zero, a free port will be assigned.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.PreloadOptions.DialTimeout">
            <summary>
            Determines how long an <see cref="T:Libplanet.Net.Transports.ITransport"/> should wait before timimg out
            when dialing peers for either <see cref="T:Libplanet.Net.Messages.PongMsg"/>, <see cref="T:Libplanet.Net.Messages.NeighborsMsg"/>,
            or <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/> during a preloading phase.  Generally, a more relaxed
            <see cref="T:System.TimeSpan"/> is used compared to <see cref="P:Libplanet.Net.Options.TimeoutOptions.DialTimeout"/>.
            Set to <see cref="F:Libplanet.Net.Options.PreloadOptions.DefaultDialTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.TimeoutOptions.DialTimeout"/>
        </member>
        <member name="P:Libplanet.Net.Options.PreloadOptions.TipDeltaThreshold">
            <summary>
            Determines when to stop preloading. Preloading is considered complete when
            the delta between the local node's tip index and the best known tip
            index is less than or equal to this value.  Set to
            <see cref="F:Libplanet.Net.Options.PreloadOptions.DefaultTipDeltaThreshold"/> by default. </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.BlockDemandLifespan">
            <summary>
            The lifespan of block demand.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.MessageTimestampBuffer">
            <summary>
            The amount of difference in <see cref="T:System.TimeSpan"/> allowed from current local time for
            a received <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.RefreshPeriod">
            <summary>
            The frequency of <see cref="M:Libplanet.Net.Protocols.IProtocol.RefreshTableAsync(System.TimeSpan,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.RefreshLifespan">
            <summary>
            The lifespan of <see cref="T:Libplanet.Net.BoundPeer"/> in routing table.
            <seealso cref="M:Libplanet.Net.Protocols.IProtocol.RefreshTableAsync(System.TimeSpan,System.Threading.CancellationToken)" />
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.StaticPeers">
            <summary>
            The list of <see cref="T:Libplanet.Net.BoundPeer"/>s to keep in routing table permanently.
            The <see cref="T:Libplanet.Net.BoundPeer"/>s in the list will be maintained periodically within
            <see cref="P:Libplanet.Net.Options.SwarmOptions.StaticPeersMaintainPeriod"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.StaticPeersMaintainPeriod">
            <summary>
            The period of <c>Task</c> maintains static peer.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.SwarmOptions.StaticPeers"/>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.BranchpointThreshold">
            <summary>
            The threshold for detecting branchpoint when block synchronization.
            If the branch point is outside threshold from the <see cref="P:Libplanet.Blockchain.BlockChain.Tip" />,
            using an approximated value.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.MinimumBroadcastTarget">
            <summary>
            The minimum number to select from routing table when broadcast messages.
            It is 10 by default.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.BlockBroadcastInterval">
            <summary>
            Determines how often <see cref="T:Libplanet.Net.Swarm"/> broadcasts <see cref="T:Libplanet.Net.Messages.BlockHeaderMsg"/>
            to its peers.
            </summary>
            <remarks>
            Broadcasts are also made whenever <see cref="P:Libplanet.Blockchain.BlockChain.Tip"/> changes in addition
            to regular broadcasts determined by this option.
            </remarks>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.TxBroadcastInterval">
            <summary>
            Determines how often <see cref="T:Libplanet.Net.Swarm"/> broadcasts <see cref="T:Libplanet.Net.Messages.TxIdsMsg"/>
            to its peers.
            </summary>
            <remarks>
            Broadcasts are also made whenever <see cref="T:Libplanet.Types.Tx.Transaction"/> is staged in addition
            to regular broadcasts determined by this option.
            </remarks>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.TableSize">
            <summary>
            The number of buckets of the Kademlia based routing table.
            </summary>
            <seealso cref="T:Libplanet.Net.Protocols.RoutingTable"/>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.BucketSize">
            <summary>
            The size of each bucket of the Kademlia based routing table.
            </summary>
            <seealso cref="T:Libplanet.Net.Protocols.RoutingTable"/>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.MaximumPollPeers">
            <summary>
            The maximum number of peers to poll blocks.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.TipLifespan">
            <summary>
            The lifespan of the <see cref="P:Libplanet.Blockchain.BlockChain.Tip"/>.  When the tip has not been updated
            for the configured lifespan, <see cref="T:Libplanet.Net.Swarm"/> pulls new blocks from neighbor
            peers.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.BootstrapOptions">
            <summary>
            Various options for the default bootstrap behavior of <see cref="T:Libplanet.Net.Swarm"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.PreloadOptions">
            <summary>
            Various options for the default preload behavior of <see cref="T:Libplanet.Net.Swarm"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.TimeoutOptions">
            <summary>
            Various timeout options for sending and receiving <see cref="T:Libplanet.Net.Messages.Message"/>s through
            an <see cref="T:Libplanet.Net.Transports.ITransport"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.SwarmOptions.TaskRegulationOptions">
            <summary>
            Various task spawning regulations for handling received <see cref="T:Libplanet.Net.Messages.Message"/>s
            through an <see cref="T:Libplanet.Net.Transports.ITransport"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.TaskRegulationOptions.MaxTransferBlocksTaskCount">
            <summary>
            Max limit to spawn a task that handles <see cref="T:Libplanet.Net.Messages.GetBlocksMsg"/> message.
            If 0 is given, task spawning is not limited.
            Set to 0 by default.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.TaskRegulationOptions.MaxTransferTxsTaskCount">
            <summary>
            Max limit to spawn a task that handles <see cref="T:Libplanet.Net.Messages.GetTxsMsg"/> message.
            If 0 is given, task spawning is not limited.
            Set to 0 by default.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Options.TimeoutOptions">
            <summary>
            Various timeout options for sending and receiving <see cref="T:Libplanet.Net.Messages.Message"/>s through
            an <see cref="T:Libplanet.Net.Transports.ITransport"/>. Each timeout determines how long an <see cref="T:Libplanet.Net.Transports.ITransport"/>
            should wait for all expected responses to arrive before giving up after sending
            a <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.MaxTimeout">
            <summary>
            The maximum timeout used in <see cref="T:Libplanet.Net.Swarm"/>. This is a hard limit for
            all <see cref="T:Libplanet.Net.Messages.Message"/>s.  Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultMaxTimeout"/> seconds
            by default.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.DialTimeout">
            <summary>
            Determines how long an <see cref="T:Libplanet.Net.Transports.ITransport"/> should wait before timing out
            when dialing peers for either <see cref="T:Libplanet.Net.Messages.PongMsg"/>, <see cref="T:Libplanet.Net.Messages.NeighborsMsg"/>,
            or <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/> for a long running process.
            Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultDialTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.BootstrapOptions.DialTimeout"/>
            <seealso cref="P:Libplanet.Net.Options.PreloadOptions.DialTimeout"/>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.GetBlockHashesTimeout">
            <summary>
            The timeout used when sending a request with <see cref="T:Libplanet.Net.Messages.GetBlockHashesMsg"/>
            to receive a <see cref="T:Libplanet.Net.Messages.BlockHashesMsg"/> message.
            Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultGetBlockHashesTimeout"/> seconds by default.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.GetBlocksBaseTimeout">
            <summary>
            The base timeout used when sending a request with <see cref="T:Libplanet.Net.Messages.GetBlocksMsg"/>
            to receive <see cref="T:Libplanet.Net.Messages.BlocksMsg"/> messages.
            Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultGetBlocksBaseTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.TimeoutOptions.GetBlocksPerBlockHashTimeout"/>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.GetBlocksPerBlockHashTimeout">
            <summary>
            The additional amount to wait for each <see cref="T:Libplanet.Types.Blocks.BlockHash"/> in
            <see cref="T:Libplanet.Net.Messages.GetBlocksMsg"/> to receive <see cref="T:Libplanet.Net.Messages.BlocksMsg"/> messages.
            Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultGetBlocksPerBlockHashTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.TimeoutOptions.GetBlocksBaseTimeout"/>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.GetTxsBaseTimeout">
            <summary>
            The base timeout used when sending a request with <see cref="T:Libplanet.Net.Messages.GetTxsMsg"/>
            to receive <see cref="T:Libplanet.Types.Tx.Transaction"/> messages.
            Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultGetTxsBaseTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.TimeoutOptions.GetTxsPerTxIdTimeout"/>
        </member>
        <member name="P:Libplanet.Net.Options.TimeoutOptions.GetTxsPerTxIdTimeout">
            <summary>
            The additional amount to wait for each <see cref="T:Libplanet.Types.Tx.TxId"/> in <see cref="T:Libplanet.Net.Messages.GetTxsMsg"/>
            to receive <see cref="T:Libplanet.Types.Tx.Transaction"/> messages.
            Set to <see cref="F:Libplanet.Net.Options.TimeoutOptions.DefaultGetTxsPerTxIdTimeout"/> seconds by default.
            </summary>
            <seealso cref="P:Libplanet.Net.Options.TimeoutOptions.GetTxsBaseTimeout"/>
        </member>
        <member name="T:Libplanet.Net.PeerChainState">
            <summary>
            The blockchain state of <see cref="T:Libplanet.Net.BoundPeer"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.PeerChainState.Peer">
            <summary>
            The peer with chain.
            </summary>
        </member>
        <member name="P:Libplanet.Net.PeerChainState.TipIndex">
            <summary>
            The blockchain tip of the <see cref="T:Libplanet.Net.BoundPeer"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.PeerChainState.ToString">
            <inheritdoc />
        </member>
        <member name="T:Libplanet.Net.PeerState">
            <summary>
            Represents a <see cref="T:Libplanet.Net.BoundPeer"/>'s state in the routing table.
            </summary>
        </member>
        <member name="P:Libplanet.Net.PeerState.Peer">
            <summary>
            <see cref="T:Libplanet.Net.BoundPeer"/> of the state.
            </summary>
        </member>
        <member name="P:Libplanet.Net.PeerState.LastUpdated">
            <summary>
            Last time messages were exchanged.
            </summary>
        </member>
        <member name="P:Libplanet.Net.PeerState.LastChecked">
            <summary>
            Last time the peer was verified.
            </summary>
        </member>
        <member name="P:Libplanet.Net.PeerState.Latency">
            <summary>
            Delay of verification in milliseconds.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Protocols.IProtocol">
            <summary>
            An interface of protocol to discover peers from the distributed network.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.IProtocol.BootstrapAsync(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Nullable{System.TimeSpan},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Conducts peer discovery for given <paramref name="bootstrapPeers"/>.
            </summary>
            <param name="bootstrapPeers">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Libplanet.Net.BoundPeer"/>s
            to bootstrap.</param>
            <param name="dialTimeout">The timeout used when waiting a reply for either
            <see cref="T:Libplanet.Net.Messages.PingMsg"/> or <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/>.
            If <see langword="null"/> is given, the task never halts by itself
            even no any response was given from the the target seed.</param>
            <param name="depth">Recursive operation depth to search peers from network.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.IProtocol.AddPeersAsync(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Tries to add given <paramref name="peers"/> to routing table
            by sending <see cref="T:Libplanet.Net.Messages.PingMsg"/>.
            </summary>
            <param name="peers">The peers to add.</param>
            <param name="timeout">A timeout of waiting for the reply of <see cref="T:Libplanet.Net.Messages.PingMsg"/>
            message sent to <paramref name="peers"/>.
            If <see langword="null"/> is given, task never halts by itself
            even the target peer gives no any response.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.IProtocol.RefreshTableAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Checks whether <see cref="T:Libplanet.Net.BoundPeer"/>s in <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> is online by
            sending <see cref="T:Libplanet.Net.Messages.PingMsg"/>.
            </summary>
            <param name="maxAge">Maximum age of peer to validate.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.IProtocol.RebuildConnectionAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reconstructs network connection between peers on network.
            </summary>
            <param name="depth">Recursive operation depth to search peers from network.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.IProtocol.CheckReplacementCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Checks the <see cref="T:Libplanet.Net.Protocols.KBucket"/> in the <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> and if
            there is an empty <see cref="T:Libplanet.Net.Protocols.KBucket"/>, fill it with <see cref="T:Libplanet.Net.BoundPeer"/>s
            in the <see cref="P:Libplanet.Net.Protocols.KBucket.ReplacementCache"/>.
            </summary>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="P:Libplanet.Net.Protocols.IRoutingTable.Count">
            <summary>
            The number of peers in the table.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Protocols.IRoutingTable.Peers">
            <summary>
            An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of peers in the table.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.IRoutingTable.AddPeer(Libplanet.Net.BoundPeer)">
            <summary>
            Adds the <paramref name="peer"/> to the table.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to add.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="peer"/>'s
            <see cref="T:Libplanet.Crypto.Address"/> is equal to the <see cref="T:Libplanet.Crypto.Address"/> of self.</exception>
        </member>
        <member name="M:Libplanet.Net.Protocols.IRoutingTable.RemovePeer(Libplanet.Net.BoundPeer)">
            <summary>
            Removes the <paramref name="peer"/> to the table.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to remove.</param>
            <returns><see langword="true"/> if the <paramref name="peer"/> is successfully
            removed from <see cref="T:Libplanet.Net.Protocols.IRoutingTable"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="peer"/>'s
            <see cref="T:Libplanet.Crypto.Address"/> is equal to the <see cref="T:Libplanet.Crypto.Address"/> of self.</exception>
        </member>
        <member name="M:Libplanet.Net.Protocols.IRoutingTable.Contains(Libplanet.Net.BoundPeer)">
            <summary>
            Determines whether the <see cref="T:Libplanet.Net.Protocols.IRoutingTable"/> contains the specified key.
            </summary>
            <param name="peer">Key to locate in the <see cref="T:Libplanet.Net.Protocols.IRoutingTable"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Libplanet.Net.Protocols.IRoutingTable" /> contains
            an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Libplanet.Net.Protocols.Kademlia">
            <summary>
            Commonly used constants and static functions for Kademlia distributed hash table.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Protocols.Kademlia.BucketSize">
            <summary>
            The size of a single bucket.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Protocols.Kademlia.TableSize">
            <summary>
            The number of buckets in the table.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Protocols.Kademlia.FindConcurrency">
            <summary>
            The number of concurrency in peer discovery.
            </summary>
        </member>
        <member name="F:Libplanet.Net.Protocols.Kademlia.MaxDepth">
            <summary>
            Depth of the peer discovery operation.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.Kademlia.CalculateDifference(Libplanet.Crypto.Address,Libplanet.Crypto.Address)">
            <summary>
            Calculates the difference between two <see cref="T:Libplanet.Crypto.Address"/>es.
            </summary>
            <param name="left">The first <see cref="T:Libplanet.Crypto.Address"/>.</param>
            <param name="right">The second <see cref="T:Libplanet.Crypto.Address"/>.</param>
            <returns>The difference between the two <see cref="T:Libplanet.Crypto.Address"/>es given.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.Kademlia.CommonPrefixLength(Libplanet.Crypto.Address,Libplanet.Crypto.Address)">
            <summary>
            Calculates the length of the common prefix between two <see cref="T:Libplanet.Crypto.Address"/>es
            by finding the index of the first non-zero bit of the xor between the two.
            </summary>
            <param name="left">The first element to calculate the common prefix length.</param>
            <param name="right">The second element to calculate the common prefix length.</param>
            <returns>The length of the common prefix between <paramref name="left"/> and
            <paramref name="right"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.Kademlia.CalculateDistance(Libplanet.Crypto.Address,Libplanet.Crypto.Address)">
            <summary>
            Calculates the distance between two <see cref="T:Libplanet.Crypto.Address"/>es.
            </summary>
            <param name="left">The first <see cref="T:Libplanet.Crypto.Address"/>.</param>
            <param name="right">The second <see cref="T:Libplanet.Crypto.Address"/>.</param>
            <returns>The distance between the two <see cref="T:Libplanet.Crypto.Address"/>es given.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.Kademlia.SortByDistance(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},Libplanet.Crypto.Address)">
            <summary>
            Sorts a list of <see cref="T:Libplanet.Net.BoundPeer"/>s with respect to
            the distance from <paramref name="target"/> in ascending order.
            </summary>
            <param name="peers">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Libplanet.Net.BoundPeer"/>s
            to sort.</param>
            <param name="target">The <see cref="T:Libplanet.Crypto.Address"/> to calculate the distance of
            each element in <paramref name="peers"/>.</param>
            <returns>>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are sorted
            according to the distance with <paramref name="target"/>.</returns>
        </member>
        <member name="T:Libplanet.Net.Protocols.KademliaProtocol">
            <summary>
            A Kademlia based peer discovery protocol.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.#ctor(Libplanet.Net.Protocols.RoutingTable,Libplanet.Net.Transports.ITransport,Libplanet.Crypto.Address,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a <see cref="T:Libplanet.Net.Protocols.KademliaProtocol"/> instance.
            </summary>
            <param name="table">
            The <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> where <see cref="T:Libplanet.Net.BoundPeer"/>s are stored.</param>
            <param name="transport"><see cref="T:Libplanet.Net.Transports.ITransport"/> to process messages.</param>
            <param name="address">The <see cref="T:Libplanet.Crypto.Address"/> of the <see cref="T:Libplanet.Net.BoundPeer"/>
            to be the reference point.</param>
            <param name="findConcurrency">The number of concurrency in peer discovery.</param>
            <param name="requestTimeout">
            A timeout of waiting for the reply of messages.  If it's omitted
            or <see langword="null"/> is given, will automatically be set to 5 seconds.</param>
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.BootstrapAsync(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Nullable{System.TimeSpan},System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.AddPeersAsync(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.RefreshTableAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.CheckAllPeersAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Refreshes all peers in routing table.
            </summary>
            <param name="timeout">A timeout of waiting for the reply of messages.
            If <see langword="null"/> is given, the task never halts by itself
            even no any response was given from the the target peer.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.RebuildConnectionAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.CheckReplacementCacheAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.FindSpecificPeerAsync(Libplanet.Crypto.Address,System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Use <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/> messages to to find a <see cref="T:Libplanet.Net.BoundPeer"/> with
            <see cref="T:Libplanet.Crypto.Address"/> of <paramref name="target"/>.
            </summary>
            <param name="target">The <see cref="T:Libplanet.Crypto.Address"/> to find.</param>
            <param name="depth">Target depth of recursive operation.</param>
            <param name="timeout"><see cref="T:System.TimeSpan"/> for waiting reply of
            <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/>.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>A <see cref="T:Libplanet.Net.BoundPeer"/> with <paramref name="target"/> as its
            <see cref="T:Libplanet.Crypto.Address"/> if found.  Otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.ValidateAsync(Libplanet.Net.BoundPeer,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Validate peer by send <see cref="T:Libplanet.Net.Messages.PingMsg"/> to <paramref name="peer"/>. If target peer
            does not responds, remove it from the table.
            </summary>
            <param name="peer">A <see cref="T:Libplanet.Net.BoundPeer"/> to validate.</param>
            <param name="timeout">Timeout for waiting reply of <see cref="T:Libplanet.Net.Messages.PingMsg"/>.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:System.TimeoutException">
            Thrown when validation fails in given <paramref name="timeout"/>.
            </exception>
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.FindPeerAsync(System.Collections.Concurrent.ConcurrentBag{Libplanet.Net.BoundPeer},System.Collections.Concurrent.ConcurrentBag{Libplanet.Net.BoundPeer},Libplanet.Crypto.Address,Libplanet.Net.BoundPeer,System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Send <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/> messages to <paramref name="viaPeer"/>
            to find <see cref="T:Libplanet.Net.BoundPeer"/>s near <paramref name="target"/>.
            </summary>
            <param name="history">The <see cref="T:Libplanet.Net.BoundPeer"/> that searched.</param>
            <param name="dialHistory">The <see cref="T:Libplanet.Net.BoundPeer"/> that ping was sent.</param>
            <param name="target">The <see cref="T:Libplanet.Crypto.Address"/> to find.</param>
            <param name="viaPeer">The target <see cref="T:Libplanet.Net.BoundPeer"/>
            to send <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/> message.
            If null, selects 3 <see cref="T:Libplanet.Net.BoundPeer"/>s from <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> of
            self.</param>
            <param name="depth">Target depth of recursive operation.</param>
            <param name="timeout"><see cref="T:System.TimeSpan"/> for waiting reply of
            <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/>.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KademliaProtocol.ProcessFoundAsync(System.Collections.Concurrent.ConcurrentBag{Libplanet.Net.BoundPeer},System.Collections.Concurrent.ConcurrentBag{Libplanet.Net.BoundPeer},System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},Libplanet.Crypto.Address,System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Process <see cref="T:Libplanet.Net.BoundPeer"/>s that is replied by sending
            <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/> request.
            </summary>
            <param name="history"><see cref="T:Libplanet.Net.BoundPeer"/>s that already searched.</param>
            <param name="dialHistory"><see cref="T:Libplanet.Net.BoundPeer"/>s that ping sent.</param>
            <param name="found"><see cref="T:Libplanet.Net.BoundPeer"/>s that found.</param>
            <param name="target">The target <see cref="T:Libplanet.Crypto.Address"/> to search.</param>
            <param name="depth">Target depth of recursive operation. If -1 is given,
            it runs until the closest peer is found.</param>
            <param name="timeout"><see cref="T:System.TimeSpan"/> for next depth's
            <see cref="M:Libplanet.Net.Protocols.KademliaProtocol.FindPeerAsync(System.Collections.Concurrent.ConcurrentBag{Libplanet.Net.BoundPeer},System.Collections.Concurrent.ConcurrentBag{Libplanet.Net.BoundPeer},Libplanet.Crypto.Address,Libplanet.Net.BoundPeer,System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)"/> operation.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:System.TimeoutException">Thrown when all peers that found are
            not online.</exception>
        </member>
        <member name="P:Libplanet.Net.Protocols.KBucket.Head">
            <summary>
            The <see cref="T:Libplanet.Net.PeerState"/> used most recently. If the bucket is empty,
            this is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Protocols.KBucket.Tail">
            <summary>
            The <see cref="T:Libplanet.Net.PeerState"/> used longest time ago. If the bucket is empty,
            this is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucket.Contains(Libplanet.Net.BoundPeer)">
            <summary>
            Checks whether the bucket contains given <paramref name="peer"/>.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to check.</param>
            <returns><see langword="true"/> if the bucket contains <paramref name="peer"/>,
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucket.Clear">
            <summary>
            Empties the bucket.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucket.RemovePeer(Libplanet.Net.BoundPeer)">
            <summary>
            Removes given <paramref name="peer"/> from the bucket.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to remove.</param>
            <returns>
            <see langword="true"/> if <paramref name="peer"/> was removed,
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucket.GetRandomPeer(System.Nullable{Libplanet.Crypto.Address})">
            <summary>
            Selects a random <see cref="T:Libplanet.Net.BoundPeer"/> in the bucket excluding
            <paramref name="except"/>.
            </summary>
            <param name="except">The <see cref="T:Libplanet.Net.BoundPeer"/> to exclude when selecting.</param>
            <returns>
            A randomly selected <see cref="T:Libplanet.Net.BoundPeer"/> in the bucket excluding
            <paramref name="except"/>. If no <see cref="T:Libplanet.Net.BoundPeer"/> can be selected,
            <see langword="null"/> is returned.
            </returns>
        </member>
        <member name="T:Libplanet.Net.Protocols.KBucketDictionary">
            <summary>
            <para>
            An internal dictionary with a size limit used for <see cref="T:Libplanet.Net.Protocols.KBucket"/>s.
            </para>
            <para>
            Purposely designed with the following features:
            <list type="bullet">
                <item><description>
                    Fixed maximum size.
                </description></item>
                <item><description>
                    Exception free.
                </description></item>
                <item><description>
                    Enforced concurrency.
                </description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.#ctor(System.Int32,System.Boolean,Serilog.ILogger)">
            <summary>
            Creates an instance with a size limit given by <paramref name="size"/>.
            </summary>
            <param name="size">The maximum number of elements the dictionary can hold.</param>
            <param name="replace">Whether to replace the oldest <see cref="T:Libplanet.Net.PeerState"/>,
            i.e. <see cref="P:Libplanet.Net.Protocols.KBucketDictionary.Tail"/>, if the dictionary is already full.</param>
            <param name="logger">The <see cref="T:Serilog.ILogger"/> to write log messages to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="size"/>
            is not positive..</exception>
        </member>
        <member name="P:Libplanet.Net.Protocols.KBucketDictionary.Head">
            <summary>
            The <see cref="T:Libplanet.Net.PeerState"/> updated most recently. <see langword="null"/>
            if the dictionary is empty.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Protocols.KBucketDictionary.Tail">
            <summary>
            The <see cref="T:Libplanet.Net.PeerState"/> updated least recently. <see langword="null"/>
            if the dictionary is empty.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Get(Libplanet.Net.BoundPeer)">
            <summary>
            Retrieves the <see cref="T:Libplanet.Net.BoundPeer"/> associated with <paramref name="peer"/>'s
            <see cref="T:Libplanet.Crypto.Address"/>.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to check.</param>
            <returns>The <see cref="T:Libplanet.Net.BoundPeer"/> with its address equal to
            that of the <paramref name="peer"/>'s. <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Get(Libplanet.Crypto.Address)">
            <summary>
            Retrievees the <see cref="T:Libplanet.Net.BoundPeer"/> associated with <paramref name="address"/>.
            </summary>
            <param name="address">The <see cref="T:Libplanet.Crypto.Address"/> to check.</param>
            <returns>The <see cref="T:Libplanet.Net.BoundPeer"/> with its address equal to
            that of <paramref name="address"/>. <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Contains(Libplanet.Net.BoundPeer)">
            <summary>
            Checks if the dictionary contains <paramref name="peer"/>'s <see cref="T:Libplanet.Crypto.Address"/>
            as a key.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="peer"/>'s
            <see cref="T:Libplanet.Crypto.Address"/> exists, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Contains(Libplanet.Crypto.Address)">
            <summary>
            Checks if the dictionary contains <paramref name="address"/> as a key.
            </summary>
            <param name="address">The <see cref="T:Libplanet.Crypto.Address"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="address"/> exists,
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.AddOrUpdate(Libplanet.Net.BoundPeer)">
            <summary>
            Adds or updates the dictionary with <paramref name="peer"/>.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to add or update.</param>
            <returns><see langword="true"/> if <paramref name="peer"/> was either added or updated,
            <see langword="false"/> otherwise.</returns>
            <seealso cref="M:Libplanet.Net.Protocols.KBucketDictionary.AddOrUpdate(Libplanet.Net.BoundPeer,Libplanet.Net.PeerState)"/>.
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.AddOrUpdate(Libplanet.Net.BoundPeer,Libplanet.Net.PeerState)">
            <summary>
            Adds or updates the dictionary with a key/value pair.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to add or update.</param>
            <param name="peerState">The <see cref="T:Libplanet.Net.PeerState"/> to use as a value.</param>
            <returns><see langword="true"/> if <paramref name="peer"/> was either added or updated,
            <see langword="false"/> otherwise.</returns>
            <seealso cref="M:Libplanet.Net.Protocols.KBucketDictionary.AddOrUpdate(Libplanet.Crypto.Address,Libplanet.Net.PeerState)"/>.
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.AddOrUpdate(Libplanet.Crypto.Address,Libplanet.Net.PeerState)">
            <summary>
            <para>
            Adds or updates the dictionary with a key/value pair.
            </para>
            <para>
            Internal logic is as follows:
            <list type="bullet">
                <item><description>
                    If <paramref name="address"/> is found, update its value
                    with <paramref name="peerState"/>.
                </description></item>
                <item><description>
                    Else, if the dictionary is not full, i.e. has not reached its limit in size,
                    add <paramref name="address"/> and <paramref name="peerState"/> as
                    a key/value pair.
                </description></item>
                <item><description>
                    Else, if the dictionary is full and replace option is set to
                    <see langword="true"/>, replace the oldest <see cref="T:Libplanet.Net.PeerState"/>, i.e.
                    <see cref="P:Libplanet.Net.Protocols.KBucketDictionary.Tail"/>, with <paramref name="peerState"/>.
                </description></item>
                <item><description>
                    Else, ignore.
                </description></item>
            </list>
            </para>
            </summary>
            <param name="address">The <see cref="T:Libplanet.Crypto.Address"/> to use as a key.</param>
            <param name="peerState">The <see cref="T:Libplanet.Net.PeerState"/> to use as a value.</param>
            <returns><see langword="true"/> if the key/value pair was either added or updated,
            <see langword="false"/> otherwise.</returns>
            <remarks>
            This returns <see langword="false"/> only if all following conditions are met:
            <list type="bullet">
                <item><description>
                    The dictionary does not contain <paramref name="address"/> as a key.
                </description></item>
                <item><description>
                    The dictionary is already full.
                </description></item>
                <item><description>
                    The replacement option is set to <see langword="false"/> for
                    this <see cref="T:Libplanet.Net.Protocols.KBucketDictionary"/> instance.
                </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Remove(Libplanet.Net.BoundPeer)">
            <summary>
            Removes <paramref name="peer"/> from the dictionary.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to remove.</param>
            <returns><see langword="true"/> if <paramref name="peer"/> was successfully removed,
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Remove(Libplanet.Crypto.Address)">
            <summary>
            Removes <paramref name="address"/> from the dictionary.
            </summary>
            <param name="address">The <see cref="T:Libplanet.Crypto.Address"/> to remove.</param>
            <returns><see langword="true"/> if <paramref name="address"/> was successfully removed,
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.KBucketDictionary.Clear">
            <summary>
            Empties the dictionary.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Protocols.RoutingTable">
            <summary>
            Kademlia distributed hash table.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.#ctor(Libplanet.Crypto.Address,System.Int32,System.Int32)">
            <summary>
            Creates a Kademlia distributed hash table instance.
            </summary>
            <param name="address"><see cref="T:Libplanet.Crypto.Address"/> of this peer.</param>
            <param name="tableSize">The number of buckets in the table.</param>
            <param name="bucketSize">The size of a single bucket.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="tableSize"/> or <paramref name="bucketSize"/> is
            less then or equal to 0.</exception>
        </member>
        <member name="P:Libplanet.Net.Protocols.RoutingTable.TableSize">
            <summary>
            The number of buckets in the table.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Protocols.RoutingTable.BucketSize">
            <summary>
            The size of a single bucket.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Protocols.RoutingTable.Count">
            <inheritdoc />
        </member>
        <member name="P:Libplanet.Net.Protocols.RoutingTable.Peers">
            <inheritdoc />
        </member>
        <member name="P:Libplanet.Net.Protocols.RoutingTable.PeerStates">
            <summary>
            An <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:Libplanet.Net.PeerState"/> of peers in the table.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.AddPeer(Libplanet.Net.BoundPeer)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.RemovePeer(Libplanet.Net.BoundPeer)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.Contains(Libplanet.Net.BoundPeer)">
            <inheritdoc />
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.GetPeer(Libplanet.Crypto.Address)">
            <summary>
            Finds a <seealso cref="T:Libplanet.Net.BoundPeer"/> whose <see cref="T:Libplanet.Crypto.Address"/> matches with
            the given <paramref name="addr"/> if it exits.
            </summary>
            <param name="addr">The <see cref="T:Libplanet.Crypto.Address"/> to search.</param>
            <returns>A <see cref="T:Libplanet.Net.BoundPeer"/> whose <see cref="T:Libplanet.Crypto.Address"/> matches
            the given <paramref name="addr"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.Clear">
            <summary>
            Removes all peers in the table. This method does not affect static peers.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.Neighbors(Libplanet.Net.BoundPeer,System.Int32,System.Boolean)">
            <summary>
            Returns <paramref name="k"/> nearest peers to given parameter peer from routing table.
            Return value is already sorted with respect to target.
            </summary>
            <param name="target"><see cref="T:Libplanet.Net.BoundPeer"/> to look up.</param>
            <param name="k">Number of peers to return.</param>
            <param name="includeTarget">A boolean value indicates to include a peer with
            <see cref="T:Libplanet.Crypto.Address"/> of <paramref name="target"/> in return value or not.</param>
            <returns>An enumerable of <see cref="T:Libplanet.Net.BoundPeer"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.Neighbors(Libplanet.Crypto.Address,System.Int32,System.Boolean)">
            <summary>
            Returns at most 2 * <paramref name="k"/> (2 * <paramref name="k"/> + 1 if
            <paramref name="includeTarget"/> is <see langword="true"/>) nearest peers to given
            parameter peer from routing table. Return value is sorted with respect to target.
            <seealso cref="M:Libplanet.Net.Protocols.Kademlia.SortByDistance(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},Libplanet.Crypto.Address)"/>
            </summary>
            <param name="target"><see cref="T:Libplanet.Crypto.Address"/> to look up.</param>
            <param name="k">Number of peers to return.</param>
            <param name="includeTarget">A boolean value indicates to include a peer with
            <see cref="T:Libplanet.Crypto.Address"/> of <paramref name="target"/> in return value or not.</param>
            <returns>An enumerable of <see cref="T:Libplanet.Net.BoundPeer"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Protocols.RoutingTable.Check(Libplanet.Net.BoundPeer,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Marks <paramref name="peer"/> checked and refreshes last checked time of the peer.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to check.</param>
            <param name="start"><see cref="T:System.DateTimeOffset"/> at the beginning of the check.</param>
            <param name="end"><see cref="T:System.DateTimeOffset"/> at the end of the check.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="peer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Libplanet.Net.StateDownloadState">
            <summary>
            Indicates a progress of downloading states.
            </summary>
        </member>
        <member name="P:Libplanet.Net.StateDownloadState.TotalIterationCount">
            <summary>
            Total number of messages to receive in the current batch.
            </summary>
        </member>
        <member name="P:Libplanet.Net.StateDownloadState.ReceivedIterationCount">
            <summary>
            The number of received messages until now.
            </summary>
        </member>
        <member name="P:Libplanet.Net.StateDownloadState.CurrentPhase">
            <inheritdoc />
        </member>
        <member name="P:Libplanet.Net.Swarm.BlockDemandTable">
            <summary>
            Information of <see cref="T:Libplanet.Net.Swarm"/>'s demand for new blocks.
            It is empty when the <see cref="T:Libplanet.Net.Swarm"/> does not have any block to demand.
            <seealso cref="P:Libplanet.Net.Swarm.BlockDemandTable"/>
            </summary>
        </member>
        <member name="P:Libplanet.Net.Swarm.BlockCandidateTable">
            <summary>
            This is a table of waiting <see cref="T:Libplanet.Types.Blocks.Block"/>s
            to enter the <see cref="P:Libplanet.Net.Swarm.BlockChain"/>.
            <seealso cref="P:Libplanet.Net.Swarm.BlockCandidateTable"/>
            </summary>
        </member>
        <member name="M:Libplanet.Net.Swarm.PullBlocksAsync(System.Nullable{System.TimeSpan},System.Int32,System.Int32,System.IProgress{Libplanet.Net.BlockSyncState},System.Threading.CancellationToken)">
            <summary>
            Fill blocks from the <see cref="T:Libplanet.Net.BoundPeer"/>s in the
            <see cref="P:Libplanet.Net.Swarm.RoutingTable"/>.
            </summary>
            <param name="timeout">
            The timeout value for the request to get the tip of the block.
            </param>
            <param name="maximumPollPeers">The maximum targets to send request to.</param>
            <param name="chunkSize">The chunk size of <see cref="T:Libplanet.Types.Blocks.Block"/>s to be
            added on the <see cref="P:Libplanet.Net.Swarm.BlockCandidateTable"/>.</param>
            <param name="progress">
            An instance that receives progress updates for block downloads.
            </param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.#ctor(Libplanet.Blockchain.BlockChain,Libplanet.Crypto.PrivateKey,Libplanet.Net.Transports.ITransport,Libplanet.Net.Options.SwarmOptions,Libplanet.Net.Transports.ITransport,System.Nullable{Libplanet.Net.Consensus.ConsensusReactorOption})">
            <summary>
            Creates a <see cref="T:Libplanet.Net.Swarm"/>.  This constructor in only itself does not start
            any communication with the network.
            </summary>
            <param name="blockChain">A blockchain to publicize on the network.</param>
            <param name="privateKey">A private key to sign messages.  The public part of
            this key become a part of its end address for being pointed by peers.</param>
            <param name="transport">The <see cref="T:Libplanet.Net.Transports.ITransport"/> to use for
            network communication in block synchronization.</param>
            <param name="options">Options for <see cref="T:Libplanet.Net.Swarm"/>.</param>
            <param name="consensusTransport">The <see cref="T:Libplanet.Net.Transports.ITransport"/> to use for
            network communication in consensus.
            If null is given, the node cannot join block consensus.
            </param>
            <param name="consensusOption"><see cref="T:Libplanet.Net.Consensus.ConsensusReactorOption"/> for
            initialize <see cref="P:Libplanet.Net.Swarm.ConsensusReactor"/>.</param>
        </member>
        <member name="P:Libplanet.Net.Swarm.LastMessageTimestamp">
            <summary>
            The last time when any message was arrived.
            It can be <see langword="null"/> if no message has been arrived yet.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Swarm.Validators">
            <summary>
            Returns list of the validators that consensus has in its routing table.
            If the node is not joining consensus, returns <c>null</c>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Swarm.BlockChain">
            <summary>
            The <see cref="P:Libplanet.Net.Swarm.BlockChain"/> instance this <see cref="T:Libplanet.Net.Swarm"/> instance
            synchronizes with.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Swarm.TrustedAppProtocolVersionSigners">
            <inheritdoc cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.TrustedAppProtocolVersionSigners"/>
        </member>
        <member name="P:Libplanet.Net.Swarm.AppProtocolVersion">
            <inheritdoc cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.AppProtocolVersion"/>
        </member>
        <member name="M:Libplanet.Net.Swarm.WaitForRunningAsync">
            <summary>
            Waits until this <see cref="T:Libplanet.Net.Swarm"/> instance gets started to run.
            </summary>
            <seealso cref="M:Libplanet.Net.Transports.ITransport.WaitForRunningAsync"/>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> completed when <see cref="P:Libplanet.Net.Transports.ITransport.Running"/>
            property becomes <see langword="true"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts to periodically synchronize the <see cref="P:Libplanet.Net.Swarm.BlockChain"/>.
            </summary>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.
            </param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:Libplanet.Net.SwarmException">Thrown when this <see cref="T:Libplanet.Net.Swarm"/> instance is
            already <see cref="P:Libplanet.Net.Swarm.Running"/>.</exception>
            <remarks>If the <see cref="P:Libplanet.Net.Swarm.BlockChain"/> has no blocks at all or there are long behind
            blocks to caught in the network this method could lead to unexpected behaviors, because
            this tries to render <em>all</em> actions in the behind blocks so that there are
            a lot of calls to methods of <see cref="P:Libplanet.Blockchain.BlockChain.Renderers"/> in a short
            period of time.  This can lead a game startup slow.  If you want to omit rendering of
            these actions in the behind blocks use
            <see cref="M:Libplanet.Net.Swarm.PreloadAsync(System.IProgress{Libplanet.Net.BlockSyncState},System.Threading.CancellationToken)"/>
            method too.</remarks>
        </member>
        <member name="M:Libplanet.Net.Swarm.StartAsync(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts to periodically synchronize the <see cref="P:Libplanet.Net.Swarm.BlockChain"/>.
            </summary>
            <param name="dialTimeout">
            When the <see cref="T:Libplanet.Net.Swarm"/> tries to dial each peer in <see cref="P:Libplanet.Net.Swarm.Peers"/>,
            the dial-up is cancelled after this timeout, and it tries another peer.
            If <see langword="null"/> is given it never gives up dial-ups.
            </param>
            <param name="broadcastBlockInterval">Time interval between each broadcast of
            chain tip.</param>
            <param name="broadcastTxInterval">Time interval between each broadcast of staged
            transactions.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.
            </param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:Libplanet.Net.SwarmException">Thrown when this <see cref="T:Libplanet.Net.Swarm"/> instance is
            already <see cref="P:Libplanet.Net.Swarm.Running"/>.</exception>
            <remarks>If the <see cref="P:Libplanet.Net.Swarm.BlockChain"/> has no blocks at all or there are long behind
            blocks to caught in the network this method could lead to unexpected behaviors, because
            this tries to render <em>all</em> actions in the behind blocks so that there are
            a lot of calls to methods of <see cref="P:Libplanet.Blockchain.BlockChain.Renderers"/> in a short
            period of time.  This can lead a game startup slow.  If you want to omit rendering of
            these actions in the behind blocks use
            <see cref="M:Libplanet.Net.Swarm.PreloadAsync(System.IProgress{Libplanet.Net.BlockSyncState},System.Threading.CancellationToken)"/>
            method too.</remarks>
        </member>
        <member name="M:Libplanet.Net.Swarm.BootstrapAsync(System.Threading.CancellationToken)">
            <summary>
            Join to the peer-to-peer network using seed peers.
            </summary>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:Libplanet.Net.SwarmException">Thrown when this <see cref="T:Libplanet.Net.Swarm"/> instance is
            not <see cref="P:Libplanet.Net.Swarm.Running"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Swarm.BootstrapAsync(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Nullable{System.TimeSpan},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Join to the peer-to-peer network using seed peers.
            </summary>
            <param name="seedPeers">List of seed peers.</param>
            <param name="dialTimeout">Timeout for connecting to peers.</param>
            <param name="searchDepth">Maximum recursion depth when finding neighbors of
            current <see cref="T:Libplanet.Net.BoundPeer"/> from seed peers.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:Libplanet.Net.SwarmException">Thrown when this <see cref="T:Libplanet.Net.Swarm"/> instance is
            not <see cref="P:Libplanet.Net.Swarm.Running"/>.</exception>
        </member>
        <member name="M:Libplanet.Net.Swarm.BroadcastBlock(Libplanet.Types.Blocks.Block)">
            <summary>
            Broadcasts the given block to peers.
            <para>The message is immediately broadcasted, and it is done if the same block has
            already been broadcasted before.</para>
            </summary>
            <param name="block">The block to broadcast to peers.</param>
            <remarks>It does not have to be called manually, because <see cref="T:Libplanet.Net.Swarm"/> in
            itself watches <see cref="P:Libplanet.Net.Swarm.BlockChain"/> for <see cref="P:Libplanet.Blockchain.BlockChain.Tip"/> changes and
            immediately broadcasts updates if anything changes.</remarks>
        </member>
        <member name="M:Libplanet.Net.Swarm.GetPeerChainStateAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Libplanet.Net.PeerChainState"/> of the connected <see cref="P:Libplanet.Net.Swarm.Peers"/>.
            </summary>
            <param name="dialTimeout">
            When the <see cref="T:Libplanet.Net.Swarm"/> tries to dial each peer in <see cref="P:Libplanet.Net.Swarm.Peers"/>,
            the dial-up is cancelled after this timeout, and it tries another peer.
            If <see langword="null"/> is given it never gives up dial-ups.
            </param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.
            </param>
            <returns><see cref="T:Libplanet.Net.PeerChainState"/> of the connected <see cref="P:Libplanet.Net.Swarm.Peers"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.PreloadAsync(System.IProgress{Libplanet.Net.BlockSyncState},System.Threading.CancellationToken)">
            <summary>
            Preemptively downloads blocks from registered <see cref="T:Libplanet.Net.BoundPeer"/>s.
            </summary>
            <param name="progress">
            An instance that receives progress updates for block downloads.
            </param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.
            </param>
            <returns>
            A task without value.
            You only can <c>await</c> until the method is completed.
            </returns>
            <remarks>This does not render downloaded <see cref="T:Libplanet.Action.IAction"/>s, but fills states only.
            </remarks>
            <exception cref="T:System.AggregateException">Thrown when the given the block downloading is
            failed.</exception>
        </member>
        <member name="M:Libplanet.Net.Swarm.PreloadAsync(System.Nullable{System.TimeSpan},System.Int64,System.IProgress{Libplanet.Net.BlockSyncState},System.Threading.CancellationToken)">
            <summary>
            Preemptively downloads blocks from registered <see cref="T:Libplanet.Net.BoundPeer"/>s.
            </summary>
            <param name="dialTimeout">
            When the <see cref="T:Libplanet.Net.Swarm"/> tries to dial each peer in <see cref="P:Libplanet.Net.Swarm.Peers"/>,
            the dial-up is cancelled after this timeout, and it tries another peer.
            If <see langword="null"/> is given it never gives up dial-ups.
            </param>
            <param name="tipDeltaThreshold">The threshold of the difference between the topmost tip
            among peers and the local tip.  If the local tip is still behind the topmost tip among
            peers by more than this threshold after a preloading is once done, the preloading
            is repeated.</param>
            <param name="progress">
            An instance that receives progress updates for block downloads.
            </param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.
            </param>
            <returns>
            A task without value.
            You only can <c>await</c> until the method is completed.
            </returns>
            <remarks>This does not render downloaded <see cref="T:Libplanet.Action.IAction"/>s, but fills states only.
            </remarks>
            <exception cref="T:System.AggregateException">Thrown when the given the block downloading is
            failed.</exception>
        </member>
        <member name="M:Libplanet.Net.Swarm.FindSpecificPeerAsync(Libplanet.Crypto.Address,System.Int32,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Use <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/> messages to to find a <see cref="T:Libplanet.Net.BoundPeer"/> with
            <see cref="P:Libplanet.Net.Swarm.Address"/> of <paramref name="target"/>.
            </summary>
            <param name="target">The <see cref="P:Libplanet.Net.Swarm.Address"/> to find.</param>
            <param name="depth">Target depth of recursive operation. If -1 is given,
            will recursive until the closest <see cref="T:Libplanet.Net.BoundPeer"/> to the
            <paramref name="target"/> is found.</param>
            <param name="timeout">
            <see cref="T:System.TimeSpan"/> for waiting reply of <see cref="T:Libplanet.Net.Messages.FindNeighborsMsg"/>.
            If <see langword="null"/> is given, <see cref="T:System.TimeoutException"/> will not be thrown.
            </param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>
            A <see cref="T:Libplanet.Net.BoundPeer"/> with <see cref="P:Libplanet.Net.Swarm.Address"/> of <paramref name="target"/>.
            Returns <see langword="null"/> if the peer with address does not exist.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.CheckAllPeersAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Validates all <see cref="T:Libplanet.Net.BoundPeer"/>s in the routing table by sending a simple message.
            </summary>
            <param name="timeout">Timeout for this operation. If it is set to
            <see langword="null"/>, wait infinitely until the requested operation is finished.
            </param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.AddPeersAsync(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Adds <paramref name="peers"/> to routing table by sending a simple message.
            </summary>
            <param name="peers">A list of peers to add.</param>
            <param name="timeout">Timeout for this operation. If it is set to
            <see langword="null"/>, wait infinitely until the requested operation is finished.
            </param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.GetDemandBlockHashes(Libplanet.Blockchain.BlockChain,System.Collections.Generic.IList{System.ValueTuple{Libplanet.Net.BoundPeer,Libplanet.Types.Blocks.IBlockExcerpt}},System.Int32,System.IProgress{Libplanet.Net.BlockSyncState},System.Threading.CancellationToken)">
            <summary>
            Gets all <see cref="T:Libplanet.Types.Blocks.BlockHash"/>es for <see cref="T:Libplanet.Types.Blocks.Block"/>s needed to be downloaded
            by querying <see cref="T:Libplanet.Net.BoundPeer"/>s.
            </summary>
            <param name="blockChain">The <see cref="P:Libplanet.Net.Swarm.BlockChain"/> to use as a reference
            for generating a <see cref="T:Libplanet.Blockchain.BlockLocator"/> when querying.  This may not necessarily
            be <see cref="P:Libplanet.Net.Swarm.BlockChain"/>, the canonical <see cref="P:Libplanet.Net.Swarm.BlockChain"/> instance held
            by this <see cref="T:Libplanet.Net.Swarm"/> instance.</param>
            <param name="peersWithExcerpts">The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Libplanet.Net.BoundPeer"/>s
            to query with their tips known.</param>
            <param name="chunkSize">The chunk size of returned <see cref="T:Libplanet.Types.Blocks.BlockHash"/>es.</param>
            <param name="progress">The <see cref="T:System.IProgress`1"/> to report to.</param>
            <param name="cancellationToken">The cancellation token that should be used to propagate
            a notification that this operation should be canceled.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> of <see langword="long"/> and
            <see cref="T:Libplanet.Types.Blocks.BlockHash"/> pairs, where the <see langword="long"/> value is the
            <see cref="P:Libplanet.Types.Blocks.Block.Index"/> of the <see cref="T:Libplanet.Types.Blocks.Block"/> associated with the
            <see cref="T:Libplanet.Types.Blocks.BlockHash"/> value.</returns>
            <exception cref="T:System.AggregateException">Thrown when failed to download
            <see cref="T:Libplanet.Types.Blocks.BlockHash"/>es from a <see cref="T:Libplanet.Net.BoundPeer"/>.</exception>
            <remarks>
            <para>
            This method uses the tip information for each <see cref="T:Libplanet.Net.BoundPeer"/> provided with
            <paramref name="peersWithExcerpts"/> whether to make a query in the first place.
            </para>
            <para>
            Returned list of tuples are simply concatenation of query results from different
            <see cref="T:Libplanet.Net.BoundPeer"/>s with possible duplicates.
            </para>
            <para>
            This implicitly assumes returned <see cref="T:Libplanet.Net.Messages.BlockHashesMsg"/> is properly
            indexed with a valid branching <see cref="T:Libplanet.Types.Blocks.BlockHash"/> as its first element and
            skips it when constructing the result as it is not necessary to download.
            As such, returned result is simply a "dump" of possible <see cref="T:Libplanet.Types.Blocks.BlockHash"/>es
            to download.
            </para>
            </remarks>
        </member>
        <member name="M:Libplanet.Net.Swarm.GetPeersWithExcerpts(System.Nullable{System.TimeSpan},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets <see cref="T:Libplanet.Types.Blocks.IBlockExcerpt"/>es from randomly selected <see cref="T:Libplanet.Net.BoundPeer"/>s
            from <see cref="P:Libplanet.Net.Swarm.Peers"/> with each <see cref="T:Libplanet.Types.Blocks.IBlockExcerpt"/> tied to
            its originating <see cref="T:Libplanet.Net.BoundPeer"/>.
            </summary>
            <param name="dialTimeout">Timeout for each dialing operation to
            a <see cref="T:Libplanet.Net.BoundPeer"/> in <see cref="P:Libplanet.Net.Swarm.Peers"/>.  Not having a timeout limit
            is equivalent to setting this value to <see langword="null"/>.</param>
            <param name="maxPeersToDial">Maximum number of <see cref="T:Libplanet.Net.BoundPeer"/>s to dial.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task with a <see cref="T:System.Collections.Generic.List`1"/> of tuples
            of <see cref="T:Libplanet.Net.BoundPeer"/> and <see cref="T:Libplanet.Types.Blocks.IBlockExcerpt"/> ordered by
            <see cref="P:Libplanet.Types.Blocks.IBlockExcerpt.Index"/> in descending order.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.DialExistingPeers(System.Nullable{System.TimeSpan},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/>es from randomly selected <see cref="T:Libplanet.Net.BoundPeer"/>s
            from <see cref="P:Libplanet.Net.Swarm.Peers"/> with each <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/> tied to
            its originating <see cref="T:Libplanet.Net.BoundPeer"/>.
            </summary>
            <param name="dialTimeout">Timeout for each dialing operation to
            a <see cref="T:Libplanet.Net.BoundPeer"/> in <see cref="P:Libplanet.Net.Swarm.Peers"/>.  Not having a timeout limit
            is equivalent to setting this value to <see langword="null"/>.</param>
            <param name="maxPeersToDial">Maximum number of <see cref="T:Libplanet.Net.BoundPeer"/>s to dial.</param>
            <param name="cancellationToken">A cancellation token used to propagate notification
            that this operation should be canceled.</param>
            <returns>An awaitable task with an <see cref="T:System.Array"/> of tuples
            of <see cref="T:Libplanet.Net.BoundPeer"/> and <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/> where
            <see cref="T:Libplanet.Net.Messages.ChainStatusMsg"/> can be <see langword="null"/> if dialing fails for
            a selected <see cref="T:Libplanet.Net.BoundPeer"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Swarm.IsBlockNeeded(Libplanet.Types.Blocks.IBlockExcerpt)">
            <summary>
            Checks if the corresponding <see cref="T:Libplanet.Types.Blocks.Block"/> to a given
            <see cref="T:Libplanet.Types.Blocks.IBlockExcerpt"/> is needed for <see cref="P:Libplanet.Net.Swarm.BlockChain"/>.
            </summary>
            <param name="target">The <see cref="T:Libplanet.Types.Blocks.IBlockExcerpt"/> to compare to the current
            <see cref="P:Libplanet.Blockchain.BlockChain.Tip"/> of <see cref="P:Libplanet.Net.Swarm.BlockChain"/>.</param>
            <returns><see langword="true"/> if the corresponding <see cref="T:Libplanet.Types.Blocks.Block"/> to
            <paramref name="target"/> is needed, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Libplanet.Net.Transports.BoundPeerExtensions">
            <summary>
            This extension class activates transport-oriented methods on <see cref="T:Libplanet.Net.BoundPeer"/>.
            </summary>
            <seealso cref="T:Libplanet.Net.BoundPeer"/>
        </member>
        <member name="M:Libplanet.Net.Transports.BoundPeerExtensions.QueryAppProtocolVersionNetMQ(Libplanet.Net.BoundPeer,System.Nullable{System.TimeSpan})">
            <summary>
            Queries <see cref="T:Libplanet.Net.AppProtocolVersion"/> of given <see cref="T:Libplanet.Net.BoundPeer"/>
            specialized for NetMQ based transport.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to query
            <see cref="T:Libplanet.Net.AppProtocolVersion"/>.</param>
            <param name="timeout">Timeout value for request.</param>
            <returns><see cref="T:Libplanet.Net.AppProtocolVersion"/> of given peer. </returns>
        </member>
        <member name="M:Libplanet.Net.Transports.BoundPeerExtensions.ResolveNetMQAddressAsync(Libplanet.Net.BoundPeer)">
            <summary>
            Get IPv4 TCP address <see cref="T:System.String"/> of given <see cref="T:Libplanet.Net.BoundPeer"/>
            to be used on NetMQ transport.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to get TCP NetMQ address.</param>
            <returns>IPv4 TCP address <see cref="T:System.String"/> of given <paramref name="peer"/>.
            </returns>
            <exception cref="T:Libplanet.Net.Transports.TransportException">Thrown if failed to resolve address for given peer.
            </exception>
        </member>
        <member name="T:Libplanet.Net.Transports.CommunicationFailException">
            <summary>
            An <see cref="T:System.Exception"/> thrown when fail to complete a sending and receiving messages
            cycle via <see cref="T:Libplanet.Net.Transports.ITransport"/> for one of the expected reasons such as normal timeout,
            receiving a invalid reply, etc.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Transports.DifferentAppProtocolVersionException">
            <summary>
            The exception that is thrown when the version of the
            <see cref="T:Libplanet.Net.Messages.Message"/> that <see cref="T:Libplanet.Net.Swarm"/> received
            is different.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Transports.DifferentAppProtocolVersionException.#ctor(System.String,Libplanet.Net.AppProtocolVersion,Libplanet.Net.AppProtocolVersion,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Libplanet.Net.Transports.DifferentAppProtocolVersionException"/> class.
            </summary>
            <param name="message">Specifies an <see cref="P:System.Exception.Message"/>.</param>
            <param name="expectedAppProtocolVersion">The protocol version of
            the local <see cref="T:Libplanet.Net.Swarm"/>.</param>
            <param name="actualAppProtocolVersion">The protocol version of the
            <see cref="T:Libplanet.Net.BoundPeer"/> that the local <see cref="T:Libplanet.Net.Swarm"/> is trying to connect
            to.</param>
            <param name="trusted">Whether <paramref name="actualAppProtocolVersion"/>
            is signed by a trusted signer.</param>
        </member>
        <member name="P:Libplanet.Net.Transports.DifferentAppProtocolVersionException.ExpectedApv">
            <summary>
            The protocol version of the current <see cref="T:Libplanet.Net.Swarm"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Transports.DifferentAppProtocolVersionException.ActualApv">
            <summary>
            The protocol version of the <see cref="T:Libplanet.Net.BoundPeer"/> that the
            <see cref="T:Libplanet.Net.Swarm" /> is trying to connect to.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Transports.DifferentAppProtocolVersionException.Trusted">
            <summary>
            Whether <see cref="P:Libplanet.Net.Transports.DifferentAppProtocolVersionException.ActualApv"/> is signed by a trusted signer.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Transports.InvalidCredentialException">
            <summary>
            An <see cref="T:System.Exception"/> that is thrown when a provided credential is invalid
            when signing an encoded <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Transports.InvalidMessageSignatureException">
            <summary>
            An exception that is thrown when the signature of an encoded <see cref="T:Libplanet.Net.Messages.Message"/> is
            invalid.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Transports.InvalidMessageTimestampException">
            <summary>
            An exception that is thrown when the timestamp of an encoded <see cref="T:Libplanet.Net.Messages.Message"/> is
            invalid.
            </summary>
        </member>
        <member name="T:Libplanet.Net.Transports.ITransport">
            <summary>
            An interface to handle peer-to-peer networking, including <see cref="T:Libplanet.Net.Messages.Message"/> exchange
            and <see cref="T:Libplanet.Net.BoundPeer"/> managing.
            </summary>
            <remarks>
            An instance of a transport implementing <see cref="T:Libplanet.Net.Transports.ITransport"/> should always be able to
            send requests and receive replies.
            </remarks>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.ProcessMessageHandler">
            <summary>
            The list of tasks invoked when a message that is not
            a reply is received.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.AsPeer">
            <summary>
            The <em>current</em> <see cref="T:Libplanet.Net.BoundPeer"/> representation of <see cref="T:Libplanet.Net.Transports.ITransport"/>.
            </summary>
            <remarks>
            This creates a new instance of <see cref="T:Libplanet.Net.BoundPeer"/> on the fly and can be different
            at different points of time depending on implementation, as <see cref="T:Libplanet.Net.Transports.ITransport"/>
            may account for changing endpoint.
            </remarks>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.LastMessageTimestamp">
            <summary>
            The <see cref="T:System.DateTimeOffset"/> of the last message received.
            </summary>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.Running">
            <summary>
            <para>
            Whether this <see cref="T:Libplanet.Net.Transports.ITransport"/> instance is running.
            </para>
            <para>
            When the value is <see langword="true"/>, the <see cref="T:Libplanet.Net.Transports.ITransport"/> can receive
            outside requests.  When the value is <see langword="false"/>,
            the <see cref="T:Libplanet.Net.Transports.ITransport"/> stops receiving outside requests.
            </para>
            </summary>
            <value>The value indicating whether the instance is running.</value>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.AppProtocolVersion">
            <inheritdoc cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.AppProtocolVersion"/>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.TrustedAppProtocolVersionSigners">
            <inheritdoc cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.TrustedAppProtocolVersionSigners"/>
        </member>
        <member name="P:Libplanet.Net.Transports.ITransport.DifferentAppProtocolVersionEncountered">
            <inheritdoc cref="P:Libplanet.Net.Options.AppProtocolVersionOptions.DifferentAppProtocolVersionEncountered"/>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts running a transport layer as to put it in a <see cref="P:Libplanet.Net.Transports.ITransport.Running"/> state.
            </summary>
            <param name="cancellationToken">The cancellation token to propagate a notification
            that this operation should be canceled.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> without a value.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the instance is already disposed.
            </exception>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.StopAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stops running a transport layer as to put it in a not <see cref="P:Libplanet.Net.Transports.ITransport.Running"/> state.
            </summary>
            <param name="waitFor">The <see cref="T:System.TimeSpan"/> to delay before actual stopping.
            </param>
            <param name="cancellationToken">The cancellation token to propagate a notification
            that this operation should be canceled.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> without a value.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the instance is already disposed.
            </exception>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.WaitForRunningAsync">
            <summary>
            Waits until this <see cref="T:Libplanet.Net.Transports.ITransport"/> instance gets started to run.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> completed when <see cref="P:Libplanet.Net.Transports.ITransport.Running"/>
            property becomes <see langword="true"/>.</returns>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.SendMessageAsync(Libplanet.Net.BoundPeer,Libplanet.Net.Messages.MessageContent,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Sends a <see cref="T:Libplanet.Net.Messages.MessageContent"/> to a given <see cref="T:Libplanet.Net.BoundPeer"/>
            and waits for its single reply.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to send message to.</param>
            <param name="content">The <see cref="T:Libplanet.Net.Messages.MessageContent"/> to send.</param>
            <param name="timeout">A timeout of waiting for the reply of the message.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>The replies of the <paramref name="content"/>
            sent by <paramref name="peer"/>.</returns>
            <exception cref="T:Libplanet.Net.Transports.CommunicationFailException">Thrown when fail send or receive
            a <see cref="T:Libplanet.Net.Messages.Message"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Libplanet.Net.Transports.ITransport"/> instance
            is already disposed.</exception>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.SendMessageAsync(Libplanet.Net.BoundPeer,Libplanet.Net.Messages.MessageContent,System.Nullable{System.TimeSpan},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a <see cref="T:Libplanet.Net.Messages.MessageContent"/> to a given <see cref="T:Libplanet.Net.BoundPeer"/>
            and waits for its multiple replies.
            </summary>
            <param name="peer">The <see cref="T:Libplanet.Net.BoundPeer"/> to send message to.</param>
            <param name="content">The <see cref="T:Libplanet.Net.Messages.MessageContent"/> to send.</param>
            <param name="timeout">A timeout of waiting for the reply of the message.</param>
            <param name="expectedResponses">The number of expected replies for the message.</param>
            <param name="returnWhenTimeout">Determines the behavior when failed to receive
            <paramref name="expectedResponses"/> messages and timeout occurred.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>The replies of the <paramref name="content"/>
            sent by <paramref name="peer"/>.</returns>
            <exception cref="T:Libplanet.Net.Transports.CommunicationFailException">Thrown when fail send or receive
            a <see cref="T:Libplanet.Net.Messages.Message"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Libplanet.Net.Transports.ITransport"/> instance
            is already disposed.</exception>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.BroadcastMessage(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},Libplanet.Net.Messages.MessageContent)">
            <summary>
            Broadcasts a <see cref="T:Libplanet.Net.Messages.MessageContent"/> to peers selected from the routing table.
            </summary>
            <param name="peers">The <see cref="T:Libplanet.Net.BoundPeer"/>s to broadcast the
            <paramref name="content"/>.</param>
            <param name="content">A <see cref="T:Libplanet.Net.Messages.MessageContent"/> to broadcast.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when <see cref="T:Libplanet.Net.Transports.ITransport"/> instance
            is already disposed.</exception>
        </member>
        <member name="M:Libplanet.Net.Transports.ITransport.ReplyMessageAsync(Libplanet.Net.Messages.MessageContent,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sends a <see cref="T:Libplanet.Net.Messages.MessageContent"/> as a reply.
            </summary>
            <param name="content">The <see cref="T:Libplanet.Net.Messages.MessageContent"/> to send as a reply.</param>
            <param name="identity">The byte array that represents identification of the
            <see cref="T:Libplanet.Net.Messages.MessageContent"/> to respond.</param>
            <param name="cancellationToken">
            A cancellation token used to propagate notification that this
            operation should be canceled.</param>
            <returns>An awaitable task without value.</returns>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when <see cref="T:Libplanet.Net.Transports.ITransport"/> instance is already disposed.</exception>
        </member>
        <member name="T:Libplanet.Net.Transports.NetMQTransport">
            <summary>
            Implementation of <see cref="T:Libplanet.Net.Transports.ITransport"/> interface using NetMQ.
            </summary>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.#ctor(Libplanet.Crypto.PrivateKey,Libplanet.Net.Options.AppProtocolVersionOptions,Libplanet.Net.Options.HostOptions,System.Nullable{System.TimeSpan})">
            <summary>
            Creates a <see cref="T:Libplanet.Net.Transports.NetMQTransport"/> instance.
            </summary>
            <param name="privateKey"><see cref="T:Libplanet.Crypto.PrivateKey"/> of the transport layer.</param>
            <param name="appProtocolVersionOptions">The <see cref="T:Libplanet.Net.Options.AppProtocolVersionOptions"/>
            to use when handling an <see cref="P:Libplanet.Net.Transports.NetMQTransport.AppProtocolVersion"/> attached to
            a <see cref="T:Libplanet.Net.Messages.Message"/>.</param>
            <param name="hostOptions">The <see cref="T:Libplanet.Net.Options.HostOptions"/> to use when binding
            to the network.</param>
            <param name="messageTimestampBuffer">The amount in <see cref="T:System.TimeSpan"/>
            that is allowed for the timestamp of a <see cref="T:Libplanet.Net.Messages.Message"/> to differ from
            the current time of a local node.  Every <see cref="T:Libplanet.Net.Messages.Message"/> with its timestamp
            differing greater than <paramref name="messageTimestampBuffer"/> will be ignored.
            If <see langword="null"/>, any timestamp is accepted.</param>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.ProcessMessageHandler">
            <inheritdoc/>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.AsPeer">
            <inheritdoc/>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.LastMessageTimestamp">
            <inheritdoc/>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.Running">
            <inheritdoc/>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.AppProtocolVersion">
            <inheritdoc/>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.TrustedAppProtocolVersionSigners">
            <inheritdoc/>
        </member>
        <member name="P:Libplanet.Net.Transports.NetMQTransport.DifferentAppProtocolVersionEncountered">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.Create(Libplanet.Crypto.PrivateKey,Libplanet.Net.Options.AppProtocolVersionOptions,Libplanet.Net.Options.HostOptions,System.Nullable{System.TimeSpan})">
            <summary>
            Creates an initialized <see cref="T:Libplanet.Net.Transports.NetMQTransport"/> instance.
            </summary>
            <param name="privateKey"><see cref="T:Libplanet.Crypto.PrivateKey"/> of the transport layer.</param>
            <param name="appProtocolVersionOptions">The <see cref="T:Libplanet.Net.Options.AppProtocolVersionOptions"/>
            to use when handling an <see cref="P:Libplanet.Net.Transports.NetMQTransport.AppProtocolVersion"/> attached to
            a <see cref="T:Libplanet.Net.Messages.Message"/>.</param>
            <param name="hostOptions">The <see cref="T:Libplanet.Net.Options.HostOptions"/> to use when binding
            to the network.</param>
            <param name="messageTimestampBuffer">The amount in <see cref="T:System.TimeSpan"/>
            that is allowed for the timestamp of a <see cref="T:Libplanet.Net.Messages.Message"/> to differ from
            the current time of a local node.  Every <see cref="T:Libplanet.Net.Messages.Message"/> with its timestamp
            differing greater than <paramref name="messageTimestampBuffer"/> will be ignored.
            If <see langword="null"/>, any timestamp is accepted.</param>
            <returns>
            An awaitable <see cref="T:System.Threading.Tasks.Task"/> returning a <see cref="T:Libplanet.Net.Transports.NetMQTransport"/>
            when awaited that is ready to send request <see cref="T:Libplanet.Net.Messages.Message"/>s and
            receive reply <see cref="T:Libplanet.Net.Messages.Message"/>s.
            </returns>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.StartAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.StopAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.WaitForRunningAsync">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.SendMessageAsync(Libplanet.Net.BoundPeer,Libplanet.Net.Messages.MessageContent,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.SendMessageAsync(Libplanet.Net.BoundPeer,Libplanet.Net.Messages.MessageContent,System.Nullable{System.TimeSpan},System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.BroadcastMessage(System.Collections.Generic.IEnumerable{Libplanet.Net.BoundPeer},Libplanet.Net.Messages.MessageContent)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.ReplyMessageAsync(Libplanet.Net.Messages.MessageContent,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Libplanet.Net.Transports.NetMQTransport.Initialize(System.Threading.CancellationToken)">
            <summary>
            Initializes a <see cref="T:Libplanet.Net.Transports.NetMQTransport"/> as to make it ready to
            send request <see cref="T:Libplanet.Net.Messages.MessageContent"/>s and receive reply <see cref="T:Libplanet.Net.Messages.Message"/>s.
            </summary>
            <param name="cancellationToken">The cancellation token to propagate a notification
            that this operation should be canceled.</param>
            <returns>An awaitable <see cref="T:System.Threading.Tasks.Task"/> without value.</returns>
        </member>
        <member name="T:Libplanet.Net.Transports.SendMessageFailException">
            <summary>
            An <see cref="T:System.Exception"/> thrown when fail to send a <see cref="T:Libplanet.Net.Messages.Message"/>.
            </summary>
        </member>
    </members>
</doc>
